// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: rabbitmq.proto

package amqp

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Game int32

const (
	Game_ANY_GAME    Game = 0
	Game_DOFUS_GAME  Game = 1
	Game_DOFUS_TOUCH Game = 2
	Game_DOFUS_RETRO Game = 3
)

// Enum value maps for Game.
var (
	Game_name = map[int32]string{
		0: "ANY_GAME",
		1: "DOFUS_GAME",
		2: "DOFUS_TOUCH",
		3: "DOFUS_RETRO",
	}
	Game_value = map[string]int32{
		"ANY_GAME":    0,
		"DOFUS_GAME":  1,
		"DOFUS_TOUCH": 2,
		"DOFUS_RETRO": 3,
	}
)

func (x Game) Enum() *Game {
	p := new(Game)
	*p = x
	return p
}

func (x Game) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Game) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[0].Descriptor()
}

func (Game) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[0]
}

func (x Game) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Game.Descriptor instead.
func (Game) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{0}
}

type Language int32

const (
	Language_ANY Language = 0
	Language_FR  Language = 1
	Language_EN  Language = 2
	Language_ES  Language = 3
	Language_DE  Language = 4
	Language_PT  Language = 5
)

// Enum value maps for Language.
var (
	Language_name = map[int32]string{
		0: "ANY",
		1: "FR",
		2: "EN",
		3: "ES",
		4: "DE",
		5: "PT",
	}
	Language_value = map[string]int32{
		"ANY": 0,
		"FR":  1,
		"EN":  2,
		"ES":  3,
		"DE":  4,
		"PT":  5,
	}
)

func (x Language) Enum() *Language {
	p := new(Language)
	*p = x
	return p
}

func (x Language) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Language) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[1].Descriptor()
}

func (Language) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[1]
}

func (x Language) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Language.Descriptor instead.
func (Language) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{1}
}

type EquipmentType int32

const (
	EquipmentType_NONE EquipmentType = 0
	// Equipment
	EquipmentType_AMULET       EquipmentType = 1
	EquipmentType_AXE          EquipmentType = 2
	EquipmentType_BELT         EquipmentType = 3
	EquipmentType_BOOT         EquipmentType = 4
	EquipmentType_BOW          EquipmentType = 5
	EquipmentType_CLOAK        EquipmentType = 6
	EquipmentType_DAGGER       EquipmentType = 7
	EquipmentType_DOFUS        EquipmentType = 8
	EquipmentType_DRAGOTURKEY  EquipmentType = 9
	EquipmentType_HAMMER       EquipmentType = 10
	EquipmentType_HAT          EquipmentType = 11
	EquipmentType_LANCE        EquipmentType = 12
	EquipmentType_PET          EquipmentType = 13
	EquipmentType_PETSMOUNT    EquipmentType = 14
	EquipmentType_PICKAXE      EquipmentType = 15
	EquipmentType_PRYSMARADITE EquipmentType = 16
	EquipmentType_RHINEETLE    EquipmentType = 17
	EquipmentType_RING         EquipmentType = 18
	EquipmentType_SCYTHE       EquipmentType = 19
	EquipmentType_SEEMYOOL     EquipmentType = 20
	EquipmentType_SHIELD       EquipmentType = 21
	EquipmentType_SHOVEL       EquipmentType = 22
	EquipmentType_STAFF        EquipmentType = 23
	EquipmentType_SWORD        EquipmentType = 24
	EquipmentType_TOOL         EquipmentType = 25
	EquipmentType_TROPHY       EquipmentType = 26
	EquipmentType_WAND         EquipmentType = 27
	// Cosmetic
	EquipmentType_COSTUME       EquipmentType = 28
	EquipmentType_LIVING_OBJECT EquipmentType = 29
	EquipmentType_MISC_COSMETIC EquipmentType = 30
	EquipmentType_SHOULDER_PAD  EquipmentType = 31
	EquipmentType_WING          EquipmentType = 32
)

// Enum value maps for EquipmentType.
var (
	EquipmentType_name = map[int32]string{
		0:  "NONE",
		1:  "AMULET",
		2:  "AXE",
		3:  "BELT",
		4:  "BOOT",
		5:  "BOW",
		6:  "CLOAK",
		7:  "DAGGER",
		8:  "DOFUS",
		9:  "DRAGOTURKEY",
		10: "HAMMER",
		11: "HAT",
		12: "LANCE",
		13: "PET",
		14: "PETSMOUNT",
		15: "PICKAXE",
		16: "PRYSMARADITE",
		17: "RHINEETLE",
		18: "RING",
		19: "SCYTHE",
		20: "SEEMYOOL",
		21: "SHIELD",
		22: "SHOVEL",
		23: "STAFF",
		24: "SWORD",
		25: "TOOL",
		26: "TROPHY",
		27: "WAND",
		28: "COSTUME",
		29: "LIVING_OBJECT",
		30: "MISC_COSMETIC",
		31: "SHOULDER_PAD",
		32: "WING",
	}
	EquipmentType_value = map[string]int32{
		"NONE":          0,
		"AMULET":        1,
		"AXE":           2,
		"BELT":          3,
		"BOOT":          4,
		"BOW":           5,
		"CLOAK":         6,
		"DAGGER":        7,
		"DOFUS":         8,
		"DRAGOTURKEY":   9,
		"HAMMER":        10,
		"HAT":           11,
		"LANCE":         12,
		"PET":           13,
		"PETSMOUNT":     14,
		"PICKAXE":       15,
		"PRYSMARADITE":  16,
		"RHINEETLE":     17,
		"RING":          18,
		"SCYTHE":        19,
		"SEEMYOOL":      20,
		"SHIELD":        21,
		"SHOVEL":        22,
		"STAFF":         23,
		"SWORD":         24,
		"TOOL":          25,
		"TROPHY":        26,
		"WAND":          27,
		"COSTUME":       28,
		"LIVING_OBJECT": 29,
		"MISC_COSMETIC": 30,
		"SHOULDER_PAD":  31,
		"WING":          32,
	}
)

func (x EquipmentType) Enum() *EquipmentType {
	p := new(EquipmentType)
	*p = x
	return p
}

func (x EquipmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EquipmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[2].Descriptor()
}

func (EquipmentType) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[2]
}

func (x EquipmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EquipmentType.Descriptor instead.
func (EquipmentType) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{2}
}

type ItemType int32

const (
	ItemType_ANY_ITEM_TYPE   ItemType = 0
	ItemType_CONSUMABLE_TYPE ItemType = 1
	ItemType_COSMETIC_TYPE   ItemType = 2
	ItemType_EQUIPMENT_TYPE  ItemType = 3
	ItemType_MOUNT_TYPE      ItemType = 4
	ItemType_QUEST_ITEM_TYPE ItemType = 5
	ItemType_RESOURCE_TYPE   ItemType = 6
	ItemType_SET_TYPE        ItemType = 7
)

// Enum value maps for ItemType.
var (
	ItemType_name = map[int32]string{
		0: "ANY_ITEM_TYPE",
		1: "CONSUMABLE_TYPE",
		2: "COSMETIC_TYPE",
		3: "EQUIPMENT_TYPE",
		4: "MOUNT_TYPE",
		5: "QUEST_ITEM_TYPE",
		6: "RESOURCE_TYPE",
		7: "SET_TYPE",
	}
	ItemType_value = map[string]int32{
		"ANY_ITEM_TYPE":   0,
		"CONSUMABLE_TYPE": 1,
		"COSMETIC_TYPE":   2,
		"EQUIPMENT_TYPE":  3,
		"MOUNT_TYPE":      4,
		"QUEST_ITEM_TYPE": 5,
		"RESOURCE_TYPE":   6,
		"SET_TYPE":        7,
	}
)

func (x ItemType) Enum() *ItemType {
	p := new(ItemType)
	*p = x
	return p
}

func (x ItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[3].Descriptor()
}

func (ItemType) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[3]
}

func (x ItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemType.Descriptor instead.
func (ItemType) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{3}
}

type RabbitMQMessage_Type int32

const (
	RabbitMQMessage_UNKNOWN                               RabbitMQMessage_Type = 0
	RabbitMQMessage_ABOUT_REQUEST                         RabbitMQMessage_Type = 100
	RabbitMQMessage_ALIGN_GET_BOOK_REQUEST                RabbitMQMessage_Type = 200
	RabbitMQMessage_ALIGN_GET_BOOK_ANSWER                 RabbitMQMessage_Type = 201
	RabbitMQMessage_ALIGN_GET_USER_REQUEST                RabbitMQMessage_Type = 202
	RabbitMQMessage_ALIGN_GET_USER_ANSWER                 RabbitMQMessage_Type = 203
	RabbitMQMessage_ALIGN_SET_REQUEST                     RabbitMQMessage_Type = 204
	RabbitMQMessage_ALIGN_SET_ANSWER                      RabbitMQMessage_Type = 205
	RabbitMQMessage_COMPETITION_MAP_REQUEST               RabbitMQMessage_Type = 300
	RabbitMQMessage_COMPETITION_MAP_ANSWER                RabbitMQMessage_Type = 301
	RabbitMQMessage_CONFIGURATION_GET_REQUEST             RabbitMQMessage_Type = 400
	RabbitMQMessage_CONFIGURATION_GET_ANSWER              RabbitMQMessage_Type = 401
	RabbitMQMessage_CONFIGURATION_SET_SERVER_REQUEST      RabbitMQMessage_Type = 402
	RabbitMQMessage_CONFIGURATION_SET_ALMANAX_REQUEST     RabbitMQMessage_Type = 403
	RabbitMQMessage_CONFIGURATION_SET_RSS_REQUEST         RabbitMQMessage_Type = 404
	RabbitMQMessage_CONFIGURATION_SET_TWITTER_REQUEST     RabbitMQMessage_Type = 405
	RabbitMQMessage_CONFIGURATION_SET_ANSWER              RabbitMQMessage_Type = 450
	RabbitMQMessage_ENCYCLOPEDIA_ALMANAX_REQUEST          RabbitMQMessage_Type = 500
	RabbitMQMessage_ENCYCLOPEDIA_ALMANAX_ANSWER           RabbitMQMessage_Type = 501
	RabbitMQMessage_ENCYCLOPEDIA_ALMANAX_RESOURCE_REQUEST RabbitMQMessage_Type = 502
	RabbitMQMessage_ENCYCLOPEDIA_ALMANAX_RESOURCE_ANSWER  RabbitMQMessage_Type = 503
	RabbitMQMessage_ENCYCLOPEDIA_ALMANAX_EFFECT_REQUEST   RabbitMQMessage_Type = 504
	RabbitMQMessage_ENCYCLOPEDIA_ALMANAX_EFFECT_ANSWER    RabbitMQMessage_Type = 505
	RabbitMQMessage_ENCYCLOPEDIA_LIST_REQUEST             RabbitMQMessage_Type = 506
	RabbitMQMessage_ENCYCLOPEDIA_LIST_ANSWER              RabbitMQMessage_Type = 507
	RabbitMQMessage_ENCYCLOPEDIA_ITEM_REQUEST             RabbitMQMessage_Type = 508
	RabbitMQMessage_ENCYCLOPEDIA_ITEM_ANSWER              RabbitMQMessage_Type = 509
	RabbitMQMessage_HELP_REQUEST                          RabbitMQMessage_Type = 600
	RabbitMQMessage_JOB_GET_BOOK_REQUEST                  RabbitMQMessage_Type = 700
	RabbitMQMessage_JOB_GET_BOOK_ANSWER                   RabbitMQMessage_Type = 701
	RabbitMQMessage_JOB_GET_USER_REQUEST                  RabbitMQMessage_Type = 702
	RabbitMQMessage_JOB_GET_USER_ANSWER                   RabbitMQMessage_Type = 703
	RabbitMQMessage_JOB_SET_REQUEST                       RabbitMQMessage_Type = 704
	RabbitMQMessage_JOB_SET_ANSWER                        RabbitMQMessage_Type = 705
	RabbitMQMessage_NEWS_ALMANAX                          RabbitMQMessage_Type = 800
	RabbitMQMessage_NEWS_GAME                             RabbitMQMessage_Type = 801
	RabbitMQMessage_NEWS_GUILD                            RabbitMQMessage_Type = 802
	RabbitMQMessage_NEWS_RSS                              RabbitMQMessage_Type = 803
	RabbitMQMessage_NEWS_SET                              RabbitMQMessage_Type = 804
	RabbitMQMessage_NEWS_TWITTER                          RabbitMQMessage_Type = 805
	RabbitMQMessage_PORTAL_POSITION_REQUEST               RabbitMQMessage_Type = 900
	RabbitMQMessage_PORTAL_POSITION_ANSWER                RabbitMQMessage_Type = 901
)

// Enum value maps for RabbitMQMessage_Type.
var (
	RabbitMQMessage_Type_name = map[int32]string{
		0:   "UNKNOWN",
		100: "ABOUT_REQUEST",
		200: "ALIGN_GET_BOOK_REQUEST",
		201: "ALIGN_GET_BOOK_ANSWER",
		202: "ALIGN_GET_USER_REQUEST",
		203: "ALIGN_GET_USER_ANSWER",
		204: "ALIGN_SET_REQUEST",
		205: "ALIGN_SET_ANSWER",
		300: "COMPETITION_MAP_REQUEST",
		301: "COMPETITION_MAP_ANSWER",
		400: "CONFIGURATION_GET_REQUEST",
		401: "CONFIGURATION_GET_ANSWER",
		402: "CONFIGURATION_SET_SERVER_REQUEST",
		403: "CONFIGURATION_SET_ALMANAX_REQUEST",
		404: "CONFIGURATION_SET_RSS_REQUEST",
		405: "CONFIGURATION_SET_TWITTER_REQUEST",
		450: "CONFIGURATION_SET_ANSWER",
		500: "ENCYCLOPEDIA_ALMANAX_REQUEST",
		501: "ENCYCLOPEDIA_ALMANAX_ANSWER",
		502: "ENCYCLOPEDIA_ALMANAX_RESOURCE_REQUEST",
		503: "ENCYCLOPEDIA_ALMANAX_RESOURCE_ANSWER",
		504: "ENCYCLOPEDIA_ALMANAX_EFFECT_REQUEST",
		505: "ENCYCLOPEDIA_ALMANAX_EFFECT_ANSWER",
		506: "ENCYCLOPEDIA_LIST_REQUEST",
		507: "ENCYCLOPEDIA_LIST_ANSWER",
		508: "ENCYCLOPEDIA_ITEM_REQUEST",
		509: "ENCYCLOPEDIA_ITEM_ANSWER",
		600: "HELP_REQUEST",
		700: "JOB_GET_BOOK_REQUEST",
		701: "JOB_GET_BOOK_ANSWER",
		702: "JOB_GET_USER_REQUEST",
		703: "JOB_GET_USER_ANSWER",
		704: "JOB_SET_REQUEST",
		705: "JOB_SET_ANSWER",
		800: "NEWS_ALMANAX",
		801: "NEWS_GAME",
		802: "NEWS_GUILD",
		803: "NEWS_RSS",
		804: "NEWS_SET",
		805: "NEWS_TWITTER",
		900: "PORTAL_POSITION_REQUEST",
		901: "PORTAL_POSITION_ANSWER",
	}
	RabbitMQMessage_Type_value = map[string]int32{
		"UNKNOWN":                               0,
		"ABOUT_REQUEST":                         100,
		"ALIGN_GET_BOOK_REQUEST":                200,
		"ALIGN_GET_BOOK_ANSWER":                 201,
		"ALIGN_GET_USER_REQUEST":                202,
		"ALIGN_GET_USER_ANSWER":                 203,
		"ALIGN_SET_REQUEST":                     204,
		"ALIGN_SET_ANSWER":                      205,
		"COMPETITION_MAP_REQUEST":               300,
		"COMPETITION_MAP_ANSWER":                301,
		"CONFIGURATION_GET_REQUEST":             400,
		"CONFIGURATION_GET_ANSWER":              401,
		"CONFIGURATION_SET_SERVER_REQUEST":      402,
		"CONFIGURATION_SET_ALMANAX_REQUEST":     403,
		"CONFIGURATION_SET_RSS_REQUEST":         404,
		"CONFIGURATION_SET_TWITTER_REQUEST":     405,
		"CONFIGURATION_SET_ANSWER":              450,
		"ENCYCLOPEDIA_ALMANAX_REQUEST":          500,
		"ENCYCLOPEDIA_ALMANAX_ANSWER":           501,
		"ENCYCLOPEDIA_ALMANAX_RESOURCE_REQUEST": 502,
		"ENCYCLOPEDIA_ALMANAX_RESOURCE_ANSWER":  503,
		"ENCYCLOPEDIA_ALMANAX_EFFECT_REQUEST":   504,
		"ENCYCLOPEDIA_ALMANAX_EFFECT_ANSWER":    505,
		"ENCYCLOPEDIA_LIST_REQUEST":             506,
		"ENCYCLOPEDIA_LIST_ANSWER":              507,
		"ENCYCLOPEDIA_ITEM_REQUEST":             508,
		"ENCYCLOPEDIA_ITEM_ANSWER":              509,
		"HELP_REQUEST":                          600,
		"JOB_GET_BOOK_REQUEST":                  700,
		"JOB_GET_BOOK_ANSWER":                   701,
		"JOB_GET_USER_REQUEST":                  702,
		"JOB_GET_USER_ANSWER":                   703,
		"JOB_SET_REQUEST":                       704,
		"JOB_SET_ANSWER":                        705,
		"NEWS_ALMANAX":                          800,
		"NEWS_GAME":                             801,
		"NEWS_GUILD":                            802,
		"NEWS_RSS":                              803,
		"NEWS_SET":                              804,
		"NEWS_TWITTER":                          805,
		"PORTAL_POSITION_REQUEST":               900,
		"PORTAL_POSITION_ANSWER":                901,
	}
)

func (x RabbitMQMessage_Type) Enum() *RabbitMQMessage_Type {
	p := new(RabbitMQMessage_Type)
	*p = x
	return p
}

func (x RabbitMQMessage_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RabbitMQMessage_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[4].Descriptor()
}

func (RabbitMQMessage_Type) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[4]
}

func (x RabbitMQMessage_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RabbitMQMessage_Type.Descriptor instead.
func (RabbitMQMessage_Type) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{0, 0}
}

type RabbitMQMessage_Status int32

const (
	RabbitMQMessage_SUCCESS RabbitMQMessage_Status = 0
	RabbitMQMessage_FAILED  RabbitMQMessage_Status = 1
)

// Enum value maps for RabbitMQMessage_Status.
var (
	RabbitMQMessage_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILED",
	}
	RabbitMQMessage_Status_value = map[string]int32{
		"SUCCESS": 0,
		"FAILED":  1,
	}
)

func (x RabbitMQMessage_Status) Enum() *RabbitMQMessage_Status {
	p := new(RabbitMQMessage_Status)
	*p = x
	return p
}

func (x RabbitMQMessage_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RabbitMQMessage_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[5].Descriptor()
}

func (RabbitMQMessage_Status) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[5]
}

func (x RabbitMQMessage_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RabbitMQMessage_Status.Descriptor instead.
func (RabbitMQMessage_Status) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{0, 1}
}

type ConfigurationGetAnswer_NotifiedChannel_NotificationType int32

const (
	ConfigurationGetAnswer_NotifiedChannel_UNKNOWN ConfigurationGetAnswer_NotifiedChannel_NotificationType = 0
	ConfigurationGetAnswer_NotifiedChannel_ALMANAX ConfigurationGetAnswer_NotifiedChannel_NotificationType = 1
	ConfigurationGetAnswer_NotifiedChannel_RSS     ConfigurationGetAnswer_NotifiedChannel_NotificationType = 2
	ConfigurationGetAnswer_NotifiedChannel_TWITTER ConfigurationGetAnswer_NotifiedChannel_NotificationType = 3
)

// Enum value maps for ConfigurationGetAnswer_NotifiedChannel_NotificationType.
var (
	ConfigurationGetAnswer_NotifiedChannel_NotificationType_name = map[int32]string{
		0: "UNKNOWN",
		1: "ALMANAX",
		2: "RSS",
		3: "TWITTER",
	}
	ConfigurationGetAnswer_NotifiedChannel_NotificationType_value = map[string]int32{
		"UNKNOWN": 0,
		"ALMANAX": 1,
		"RSS":     2,
		"TWITTER": 3,
	}
)

func (x ConfigurationGetAnswer_NotifiedChannel_NotificationType) Enum() *ConfigurationGetAnswer_NotifiedChannel_NotificationType {
	p := new(ConfigurationGetAnswer_NotifiedChannel_NotificationType)
	*p = x
	return p
}

func (x ConfigurationGetAnswer_NotifiedChannel_NotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigurationGetAnswer_NotifiedChannel_NotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[6].Descriptor()
}

func (ConfigurationGetAnswer_NotifiedChannel_NotificationType) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[6]
}

func (x ConfigurationGetAnswer_NotifiedChannel_NotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigurationGetAnswer_NotifiedChannel_NotificationType.Descriptor instead.
func (ConfigurationGetAnswer_NotifiedChannel_NotificationType) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{12, 1, 0}
}

type EncyclopediaAlmanaxEffectRequest_RequestType int32

const (
	EncyclopediaAlmanaxEffectRequest_QUERY EncyclopediaAlmanaxEffectRequest_RequestType = 0
	EncyclopediaAlmanaxEffectRequest_DATE  EncyclopediaAlmanaxEffectRequest_RequestType = 1
)

// Enum value maps for EncyclopediaAlmanaxEffectRequest_RequestType.
var (
	EncyclopediaAlmanaxEffectRequest_RequestType_name = map[int32]string{
		0: "QUERY",
		1: "DATE",
	}
	EncyclopediaAlmanaxEffectRequest_RequestType_value = map[string]int32{
		"QUERY": 0,
		"DATE":  1,
	}
)

func (x EncyclopediaAlmanaxEffectRequest_RequestType) Enum() *EncyclopediaAlmanaxEffectRequest_RequestType {
	p := new(EncyclopediaAlmanaxEffectRequest_RequestType)
	*p = x
	return p
}

func (x EncyclopediaAlmanaxEffectRequest_RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncyclopediaAlmanaxEffectRequest_RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[7].Descriptor()
}

func (EncyclopediaAlmanaxEffectRequest_RequestType) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[7]
}

func (x EncyclopediaAlmanaxEffectRequest_RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncyclopediaAlmanaxEffectRequest_RequestType.Descriptor instead.
func (EncyclopediaAlmanaxEffectRequest_RequestType) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{20, 0}
}

type EncyclopediaListRequest_Type int32

const (
	EncyclopediaListRequest_UNKNOWN        EncyclopediaListRequest_Type = 0
	EncyclopediaListRequest_ITEM           EncyclopediaListRequest_Type = 1
	EncyclopediaListRequest_SET            EncyclopediaListRequest_Type = 2
	EncyclopediaListRequest_ALMANAX_EFFECT EncyclopediaListRequest_Type = 3
)

// Enum value maps for EncyclopediaListRequest_Type.
var (
	EncyclopediaListRequest_Type_name = map[int32]string{
		0: "UNKNOWN",
		1: "ITEM",
		2: "SET",
		3: "ALMANAX_EFFECT",
	}
	EncyclopediaListRequest_Type_value = map[string]int32{
		"UNKNOWN":        0,
		"ITEM":           1,
		"SET":            2,
		"ALMANAX_EFFECT": 3,
	}
)

func (x EncyclopediaListRequest_Type) Enum() *EncyclopediaListRequest_Type {
	p := new(EncyclopediaListRequest_Type)
	*p = x
	return p
}

func (x EncyclopediaListRequest_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncyclopediaListRequest_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[8].Descriptor()
}

func (EncyclopediaListRequest_Type) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[8]
}

func (x EncyclopediaListRequest_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncyclopediaListRequest_Type.Descriptor instead.
func (EncyclopediaListRequest_Type) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{24, 0}
}

type EncyclopediaItemAnswer_Conditions_Relation int32

const (
	EncyclopediaItemAnswer_Conditions_NONE EncyclopediaItemAnswer_Conditions_Relation = 0
	EncyclopediaItemAnswer_Conditions_AND  EncyclopediaItemAnswer_Conditions_Relation = 1
	EncyclopediaItemAnswer_Conditions_OR   EncyclopediaItemAnswer_Conditions_Relation = 2
)

// Enum value maps for EncyclopediaItemAnswer_Conditions_Relation.
var (
	EncyclopediaItemAnswer_Conditions_Relation_name = map[int32]string{
		0: "NONE",
		1: "AND",
		2: "OR",
	}
	EncyclopediaItemAnswer_Conditions_Relation_value = map[string]int32{
		"NONE": 0,
		"AND":  1,
		"OR":   2,
	}
)

func (x EncyclopediaItemAnswer_Conditions_Relation) Enum() *EncyclopediaItemAnswer_Conditions_Relation {
	p := new(EncyclopediaItemAnswer_Conditions_Relation)
	*p = x
	return p
}

func (x EncyclopediaItemAnswer_Conditions_Relation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncyclopediaItemAnswer_Conditions_Relation) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[9].Descriptor()
}

func (EncyclopediaItemAnswer_Conditions_Relation) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[9]
}

func (x EncyclopediaItemAnswer_Conditions_Relation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Conditions_Relation.Descriptor instead.
func (EncyclopediaItemAnswer_Conditions_Relation) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{27, 3, 0}
}

type NewsGuildMessage_Event int32

const (
	NewsGuildMessage_UNKNOWN NewsGuildMessage_Event = 0
	NewsGuildMessage_CREATE  NewsGuildMessage_Event = 1
	NewsGuildMessage_DELETE  NewsGuildMessage_Event = 2
)

// Enum value maps for NewsGuildMessage_Event.
var (
	NewsGuildMessage_Event_name = map[int32]string{
		0: "UNKNOWN",
		1: "CREATE",
		2: "DELETE",
	}
	NewsGuildMessage_Event_value = map[string]int32{
		"UNKNOWN": 0,
		"CREATE":  1,
		"DELETE":  2,
	}
)

func (x NewsGuildMessage_Event) Enum() *NewsGuildMessage_Event {
	p := new(NewsGuildMessage_Event)
	*p = x
	return p
}

func (x NewsGuildMessage_Event) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NewsGuildMessage_Event) Descriptor() protoreflect.EnumDescriptor {
	return file_rabbitmq_proto_enumTypes[10].Descriptor()
}

func (NewsGuildMessage_Event) Type() protoreflect.EnumType {
	return &file_rabbitmq_proto_enumTypes[10]
}

func (x NewsGuildMessage_Event) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NewsGuildMessage_Event.Descriptor instead.
func (NewsGuildMessage_Event) EnumDescriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{38, 0}
}

type RabbitMQMessage struct {
	state                              protoimpl.MessageState              `protogen:"open.v1"`
	Type                               RabbitMQMessage_Type                `protobuf:"varint,1,opt,name=type,proto3,enum=amqp.RabbitMQMessage_Type" json:"type,omitempty"`
	Language                           Language                            `protobuf:"varint,2,opt,name=language,proto3,enum=amqp.Language" json:"language,omitempty"`
	Status                             RabbitMQMessage_Status              `protobuf:"varint,3,opt,name=status,proto3,enum=amqp.RabbitMQMessage_Status" json:"status,omitempty"`
	Game                               Game                                `protobuf:"varint,4,opt,name=game,proto3,enum=amqp.Game" json:"game,omitempty"`
	UserID                             string                              `protobuf:"bytes,5,opt,name=userID,proto3" json:"userID,omitempty"`
	AlignGetBookRequest                *AlignGetBookRequest                `protobuf:"bytes,100,opt,name=alignGetBookRequest,proto3" json:"alignGetBookRequest,omitempty"`
	AlignGetBookAnswer                 *AlignGetBookAnswer                 `protobuf:"bytes,101,opt,name=alignGetBookAnswer,proto3" json:"alignGetBookAnswer,omitempty"`
	AlignGetUserRequest                *AlignGetUserRequest                `protobuf:"bytes,102,opt,name=alignGetUserRequest,proto3" json:"alignGetUserRequest,omitempty"`
	AlignGetUserAnswer                 *AlignGetUserAnswer                 `protobuf:"bytes,103,opt,name=alignGetUserAnswer,proto3" json:"alignGetUserAnswer,omitempty"`
	AlignSetRequest                    *AlignSetRequest                    `protobuf:"bytes,104,opt,name=alignSetRequest,proto3" json:"alignSetRequest,omitempty"`
	AlignSetAnswer                     *AlignSetAnswer                     `protobuf:"bytes,105,opt,name=alignSetAnswer,proto3" json:"alignSetAnswer,omitempty"`
	CompetitionMapRequest              *CompetitionMapRequest              `protobuf:"bytes,200,opt,name=competitionMapRequest,proto3" json:"competitionMapRequest,omitempty"`
	CompetitionMapAnswer               *CompetitionMapAnswer               `protobuf:"bytes,201,opt,name=competitionMapAnswer,proto3" json:"competitionMapAnswer,omitempty"`
	ConfigurationGetRequest            *ConfigurationGetRequest            `protobuf:"bytes,300,opt,name=configurationGetRequest,proto3" json:"configurationGetRequest,omitempty"`
	ConfigurationGetAnswer             *ConfigurationGetAnswer             `protobuf:"bytes,301,opt,name=configurationGetAnswer,proto3" json:"configurationGetAnswer,omitempty"`
	ConfigurationSetServerRequest      *ConfigurationSetServerRequest      `protobuf:"bytes,302,opt,name=configurationSetServerRequest,proto3" json:"configurationSetServerRequest,omitempty"`
	ConfigurationSetAlmanaxRequest     *ConfigurationSetAlmanaxRequest     `protobuf:"bytes,303,opt,name=configurationSetAlmanaxRequest,proto3" json:"configurationSetAlmanaxRequest,omitempty"`
	ConfigurationSetRssRequest         *ConfigurationSetRssRequest         `protobuf:"bytes,304,opt,name=configurationSetRssRequest,proto3" json:"configurationSetRssRequest,omitempty"`
	ConfigurationSetTwitterRequest     *ConfigurationSetTwitterRequest     `protobuf:"bytes,305,opt,name=configurationSetTwitterRequest,proto3" json:"configurationSetTwitterRequest,omitempty"`
	ConfigurationSetAnswer             *ConfigurationSetAnswer             `protobuf:"bytes,350,opt,name=configurationSetAnswer,proto3" json:"configurationSetAnswer,omitempty"`
	EncyclopediaAlmanaxRequest         *EncyclopediaAlmanaxRequest         `protobuf:"bytes,400,opt,name=encyclopediaAlmanaxRequest,proto3" json:"encyclopediaAlmanaxRequest,omitempty"`
	EncyclopediaAlmanaxAnswer          *EncyclopediaAlmanaxAnswer          `protobuf:"bytes,401,opt,name=encyclopediaAlmanaxAnswer,proto3" json:"encyclopediaAlmanaxAnswer,omitempty"`
	EncyclopediaAlmanaxResourceRequest *EncyclopediaAlmanaxResourceRequest `protobuf:"bytes,402,opt,name=encyclopediaAlmanaxResourceRequest,proto3" json:"encyclopediaAlmanaxResourceRequest,omitempty"`
	EncyclopediaAlmanaxResourceAnswer  *EncyclopediaAlmanaxResourceAnswer  `protobuf:"bytes,403,opt,name=encyclopediaAlmanaxResourceAnswer,proto3" json:"encyclopediaAlmanaxResourceAnswer,omitempty"`
	EncyclopediaAlmanaxEffectRequest   *EncyclopediaAlmanaxEffectRequest   `protobuf:"bytes,404,opt,name=encyclopediaAlmanaxEffectRequest,proto3" json:"encyclopediaAlmanaxEffectRequest,omitempty"`
	EncyclopediaAlmanaxEffectAnswer    *EncyclopediaAlmanaxEffectAnswer    `protobuf:"bytes,405,opt,name=encyclopediaAlmanaxEffectAnswer,proto3" json:"encyclopediaAlmanaxEffectAnswer,omitempty"`
	EncyclopediaListRequest            *EncyclopediaListRequest            `protobuf:"bytes,406,opt,name=encyclopediaListRequest,proto3" json:"encyclopediaListRequest,omitempty"`
	EncyclopediaListAnswer             *EncyclopediaListAnswer             `protobuf:"bytes,407,opt,name=encyclopediaListAnswer,proto3" json:"encyclopediaListAnswer,omitempty"`
	EncyclopediaItemRequest            *EncyclopediaItemRequest            `protobuf:"bytes,408,opt,name=encyclopediaItemRequest,proto3" json:"encyclopediaItemRequest,omitempty"`
	EncyclopediaItemAnswer             *EncyclopediaItemAnswer             `protobuf:"bytes,409,opt,name=encyclopediaItemAnswer,proto3" json:"encyclopediaItemAnswer,omitempty"`
	JobGetBookRequest                  *JobGetBookRequest                  `protobuf:"bytes,500,opt,name=jobGetBookRequest,proto3" json:"jobGetBookRequest,omitempty"`
	JobGetBookAnswer                   *JobGetBookAnswer                   `protobuf:"bytes,501,opt,name=jobGetBookAnswer,proto3" json:"jobGetBookAnswer,omitempty"`
	JobGetUserRequest                  *JobGetUserRequest                  `protobuf:"bytes,502,opt,name=jobGetUserRequest,proto3" json:"jobGetUserRequest,omitempty"`
	JobGetUserAnswer                   *JobGetUserAnswer                   `protobuf:"bytes,503,opt,name=jobGetUserAnswer,proto3" json:"jobGetUserAnswer,omitempty"`
	JobSetRequest                      *JobSetRequest                      `protobuf:"bytes,504,opt,name=jobSetRequest,proto3" json:"jobSetRequest,omitempty"`
	JobSetAnswer                       *JobSetAnswer                       `protobuf:"bytes,505,opt,name=jobSetAnswer,proto3" json:"jobSetAnswer,omitempty"`
	NewsAlmanaxMessage                 *NewsAlmanaxMessage                 `protobuf:"bytes,600,opt,name=newsAlmanaxMessage,proto3" json:"newsAlmanaxMessage,omitempty"`
	NewsGameMessage                    *NewsGameMessage                    `protobuf:"bytes,601,opt,name=newsGameMessage,proto3" json:"newsGameMessage,omitempty"`
	NewsGuildMessage                   *NewsGuildMessage                   `protobuf:"bytes,602,opt,name=newsGuildMessage,proto3" json:"newsGuildMessage,omitempty"`
	NewsRSSMessage                     *NewsRSSMessage                     `protobuf:"bytes,603,opt,name=newsRSSMessage,proto3" json:"newsRSSMessage,omitempty"`
	NewsSetMessage                     *NewsSetMessage                     `protobuf:"bytes,604,opt,name=newsSetMessage,proto3" json:"newsSetMessage,omitempty"`
	NewsTwitterMessage                 *NewsTwitterMessage                 `protobuf:"bytes,605,opt,name=newsTwitterMessage,proto3" json:"newsTwitterMessage,omitempty"`
	PortalPositionRequest              *PortalPositionRequest              `protobuf:"bytes,700,opt,name=portalPositionRequest,proto3" json:"portalPositionRequest,omitempty"`
	PortalPositionAnswer               *PortalPositionAnswer               `protobuf:"bytes,701,opt,name=portalPositionAnswer,proto3" json:"portalPositionAnswer,omitempty"`
	unknownFields                      protoimpl.UnknownFields
	sizeCache                          protoimpl.SizeCache
}

func (x *RabbitMQMessage) Reset() {
	*x = RabbitMQMessage{}
	mi := &file_rabbitmq_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RabbitMQMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RabbitMQMessage) ProtoMessage() {}

func (x *RabbitMQMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RabbitMQMessage.ProtoReflect.Descriptor instead.
func (*RabbitMQMessage) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{0}
}

func (x *RabbitMQMessage) GetType() RabbitMQMessage_Type {
	if x != nil {
		return x.Type
	}
	return RabbitMQMessage_UNKNOWN
}

func (x *RabbitMQMessage) GetLanguage() Language {
	if x != nil {
		return x.Language
	}
	return Language_ANY
}

func (x *RabbitMQMessage) GetStatus() RabbitMQMessage_Status {
	if x != nil {
		return x.Status
	}
	return RabbitMQMessage_SUCCESS
}

func (x *RabbitMQMessage) GetGame() Game {
	if x != nil {
		return x.Game
	}
	return Game_ANY_GAME
}

func (x *RabbitMQMessage) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *RabbitMQMessage) GetAlignGetBookRequest() *AlignGetBookRequest {
	if x != nil {
		return x.AlignGetBookRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetAlignGetBookAnswer() *AlignGetBookAnswer {
	if x != nil {
		return x.AlignGetBookAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetAlignGetUserRequest() *AlignGetUserRequest {
	if x != nil {
		return x.AlignGetUserRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetAlignGetUserAnswer() *AlignGetUserAnswer {
	if x != nil {
		return x.AlignGetUserAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetAlignSetRequest() *AlignSetRequest {
	if x != nil {
		return x.AlignSetRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetAlignSetAnswer() *AlignSetAnswer {
	if x != nil {
		return x.AlignSetAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetCompetitionMapRequest() *CompetitionMapRequest {
	if x != nil {
		return x.CompetitionMapRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetCompetitionMapAnswer() *CompetitionMapAnswer {
	if x != nil {
		return x.CompetitionMapAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationGetRequest() *ConfigurationGetRequest {
	if x != nil {
		return x.ConfigurationGetRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationGetAnswer() *ConfigurationGetAnswer {
	if x != nil {
		return x.ConfigurationGetAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationSetServerRequest() *ConfigurationSetServerRequest {
	if x != nil {
		return x.ConfigurationSetServerRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationSetAlmanaxRequest() *ConfigurationSetAlmanaxRequest {
	if x != nil {
		return x.ConfigurationSetAlmanaxRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationSetRssRequest() *ConfigurationSetRssRequest {
	if x != nil {
		return x.ConfigurationSetRssRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationSetTwitterRequest() *ConfigurationSetTwitterRequest {
	if x != nil {
		return x.ConfigurationSetTwitterRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetConfigurationSetAnswer() *ConfigurationSetAnswer {
	if x != nil {
		return x.ConfigurationSetAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaAlmanaxRequest() *EncyclopediaAlmanaxRequest {
	if x != nil {
		return x.EncyclopediaAlmanaxRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaAlmanaxAnswer() *EncyclopediaAlmanaxAnswer {
	if x != nil {
		return x.EncyclopediaAlmanaxAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaAlmanaxResourceRequest() *EncyclopediaAlmanaxResourceRequest {
	if x != nil {
		return x.EncyclopediaAlmanaxResourceRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaAlmanaxResourceAnswer() *EncyclopediaAlmanaxResourceAnswer {
	if x != nil {
		return x.EncyclopediaAlmanaxResourceAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaAlmanaxEffectRequest() *EncyclopediaAlmanaxEffectRequest {
	if x != nil {
		return x.EncyclopediaAlmanaxEffectRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaAlmanaxEffectAnswer() *EncyclopediaAlmanaxEffectAnswer {
	if x != nil {
		return x.EncyclopediaAlmanaxEffectAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaListRequest() *EncyclopediaListRequest {
	if x != nil {
		return x.EncyclopediaListRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaListAnswer() *EncyclopediaListAnswer {
	if x != nil {
		return x.EncyclopediaListAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaItemRequest() *EncyclopediaItemRequest {
	if x != nil {
		return x.EncyclopediaItemRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetEncyclopediaItemAnswer() *EncyclopediaItemAnswer {
	if x != nil {
		return x.EncyclopediaItemAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetJobGetBookRequest() *JobGetBookRequest {
	if x != nil {
		return x.JobGetBookRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetJobGetBookAnswer() *JobGetBookAnswer {
	if x != nil {
		return x.JobGetBookAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetJobGetUserRequest() *JobGetUserRequest {
	if x != nil {
		return x.JobGetUserRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetJobGetUserAnswer() *JobGetUserAnswer {
	if x != nil {
		return x.JobGetUserAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetJobSetRequest() *JobSetRequest {
	if x != nil {
		return x.JobSetRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetJobSetAnswer() *JobSetAnswer {
	if x != nil {
		return x.JobSetAnswer
	}
	return nil
}

func (x *RabbitMQMessage) GetNewsAlmanaxMessage() *NewsAlmanaxMessage {
	if x != nil {
		return x.NewsAlmanaxMessage
	}
	return nil
}

func (x *RabbitMQMessage) GetNewsGameMessage() *NewsGameMessage {
	if x != nil {
		return x.NewsGameMessage
	}
	return nil
}

func (x *RabbitMQMessage) GetNewsGuildMessage() *NewsGuildMessage {
	if x != nil {
		return x.NewsGuildMessage
	}
	return nil
}

func (x *RabbitMQMessage) GetNewsRSSMessage() *NewsRSSMessage {
	if x != nil {
		return x.NewsRSSMessage
	}
	return nil
}

func (x *RabbitMQMessage) GetNewsSetMessage() *NewsSetMessage {
	if x != nil {
		return x.NewsSetMessage
	}
	return nil
}

func (x *RabbitMQMessage) GetNewsTwitterMessage() *NewsTwitterMessage {
	if x != nil {
		return x.NewsTwitterMessage
	}
	return nil
}

func (x *RabbitMQMessage) GetPortalPositionRequest() *PortalPositionRequest {
	if x != nil {
		return x.PortalPositionRequest
	}
	return nil
}

func (x *RabbitMQMessage) GetPortalPositionAnswer() *PortalPositionAnswer {
	if x != nil {
		return x.PortalPositionAnswer
	}
	return nil
}

type Almanax struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bonus         string                 `protobuf:"bytes,1,opt,name=bonus,proto3" json:"bonus,omitempty"`
	Tribute       *Almanax_Tribute       `protobuf:"bytes,2,opt,name=tribute,proto3" json:"tribute,omitempty"`
	Reward        int64                  `protobuf:"varint,3,opt,name=reward,proto3" json:"reward,omitempty"`
	Date          *timestamp.Timestamp   `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Almanax) Reset() {
	*x = Almanax{}
	mi := &file_rabbitmq_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Almanax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Almanax) ProtoMessage() {}

func (x *Almanax) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Almanax.ProtoReflect.Descriptor instead.
func (*Almanax) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{1}
}

func (x *Almanax) GetBonus() string {
	if x != nil {
		return x.Bonus
	}
	return ""
}

func (x *Almanax) GetTribute() *Almanax_Tribute {
	if x != nil {
		return x.Tribute
	}
	return nil
}

func (x *Almanax) GetReward() int64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *Almanax) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type Source struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Icon          string                 `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	Url           string                 `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Source) Reset() {
	*x = Source{}
	mi := &file_rabbitmq_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{2}
}

func (x *Source) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Source) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Source) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type AlignGetBookRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserIds       []string               `protobuf:"bytes,1,rep,name=userIds,proto3" json:"userIds,omitempty"`
	CityId        string                 `protobuf:"bytes,2,opt,name=cityId,proto3" json:"cityId,omitempty"`
	OrderId       string                 `protobuf:"bytes,3,opt,name=orderId,proto3" json:"orderId,omitempty"`
	ServerId      string                 `protobuf:"bytes,4,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Offset        int64                  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Size          int64                  `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlignGetBookRequest) Reset() {
	*x = AlignGetBookRequest{}
	mi := &file_rabbitmq_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlignGetBookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignGetBookRequest) ProtoMessage() {}

func (x *AlignGetBookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignGetBookRequest.ProtoReflect.Descriptor instead.
func (*AlignGetBookRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{3}
}

func (x *AlignGetBookRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *AlignGetBookRequest) GetCityId() string {
	if x != nil {
		return x.CityId
	}
	return ""
}

func (x *AlignGetBookRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AlignGetBookRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *AlignGetBookRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *AlignGetBookRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type AlignGetBookAnswer struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	CityId        string                         `protobuf:"bytes,1,opt,name=cityId,proto3" json:"cityId,omitempty"`
	OrderId       string                         `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	ServerId      string                         `protobuf:"bytes,3,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Page          int64                          `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Pages         int64                          `protobuf:"varint,5,opt,name=pages,proto3" json:"pages,omitempty"`
	Total         int64                          `protobuf:"varint,6,opt,name=total,proto3" json:"total,omitempty"`
	Believers     []*AlignGetBookAnswer_Believer `protobuf:"bytes,7,rep,name=believers,proto3" json:"believers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlignGetBookAnswer) Reset() {
	*x = AlignGetBookAnswer{}
	mi := &file_rabbitmq_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlignGetBookAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignGetBookAnswer) ProtoMessage() {}

func (x *AlignGetBookAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignGetBookAnswer.ProtoReflect.Descriptor instead.
func (*AlignGetBookAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{4}
}

func (x *AlignGetBookAnswer) GetCityId() string {
	if x != nil {
		return x.CityId
	}
	return ""
}

func (x *AlignGetBookAnswer) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AlignGetBookAnswer) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *AlignGetBookAnswer) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AlignGetBookAnswer) GetPages() int64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *AlignGetBookAnswer) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AlignGetBookAnswer) GetBelievers() []*AlignGetBookAnswer_Believer {
	if x != nil {
		return x.Believers
	}
	return nil
}

type AlignGetUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ServerId      string                 `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlignGetUserRequest) Reset() {
	*x = AlignGetUserRequest{}
	mi := &file_rabbitmq_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlignGetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignGetUserRequest) ProtoMessage() {}

func (x *AlignGetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignGetUserRequest.ProtoReflect.Descriptor instead.
func (*AlignGetUserRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{5}
}

func (x *AlignGetUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AlignGetUserRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

type AlignGetUserAnswer struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	ServerId      string                                `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Beliefs       []*AlignGetUserAnswer_AlignExperience `protobuf:"bytes,2,rep,name=beliefs,proto3" json:"beliefs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlignGetUserAnswer) Reset() {
	*x = AlignGetUserAnswer{}
	mi := &file_rabbitmq_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlignGetUserAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignGetUserAnswer) ProtoMessage() {}

func (x *AlignGetUserAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignGetUserAnswer.ProtoReflect.Descriptor instead.
func (*AlignGetUserAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{6}
}

func (x *AlignGetUserAnswer) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *AlignGetUserAnswer) GetBeliefs() []*AlignGetUserAnswer_AlignExperience {
	if x != nil {
		return x.Beliefs
	}
	return nil
}

type AlignSetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	CityId        string                 `protobuf:"bytes,2,opt,name=cityId,proto3" json:"cityId,omitempty"`
	OrderId       string                 `protobuf:"bytes,3,opt,name=orderId,proto3" json:"orderId,omitempty"`
	ServerId      string                 `protobuf:"bytes,4,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Level         int64                  `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlignSetRequest) Reset() {
	*x = AlignSetRequest{}
	mi := &file_rabbitmq_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlignSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignSetRequest) ProtoMessage() {}

func (x *AlignSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignSetRequest.ProtoReflect.Descriptor instead.
func (*AlignSetRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{7}
}

func (x *AlignSetRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AlignSetRequest) GetCityId() string {
	if x != nil {
		return x.CityId
	}
	return ""
}

func (x *AlignSetRequest) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AlignSetRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *AlignSetRequest) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type AlignSetAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlignSetAnswer) Reset() {
	*x = AlignSetAnswer{}
	mi := &file_rabbitmq_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlignSetAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignSetAnswer) ProtoMessage() {}

func (x *AlignSetAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignSetAnswer.ProtoReflect.Descriptor instead.
func (*AlignSetAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{8}
}

type CompetitionMapRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 0    = random
	// 1-50 = selected map
	MapNumber     int64 `protobuf:"varint,1,opt,name=mapNumber,proto3" json:"mapNumber,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompetitionMapRequest) Reset() {
	*x = CompetitionMapRequest{}
	mi := &file_rabbitmq_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompetitionMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionMapRequest) ProtoMessage() {}

func (x *CompetitionMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionMapRequest.ProtoReflect.Descriptor instead.
func (*CompetitionMapRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{9}
}

func (x *CompetitionMapRequest) GetMapNumber() int64 {
	if x != nil {
		return x.MapNumber
	}
	return 0
}

type CompetitionMapAnswer struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	MapNumber      int64                  `protobuf:"varint,1,opt,name=mapNumber,proto3" json:"mapNumber,omitempty"`
	MapNormalURL   string                 `protobuf:"bytes,2,opt,name=mapNormalURL,proto3" json:"mapNormalURL,omitempty"`
	MapTacticalURL string                 `protobuf:"bytes,3,opt,name=mapTacticalURL,proto3" json:"mapTacticalURL,omitempty"`
	Source         *Source                `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CompetitionMapAnswer) Reset() {
	*x = CompetitionMapAnswer{}
	mi := &file_rabbitmq_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompetitionMapAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionMapAnswer) ProtoMessage() {}

func (x *CompetitionMapAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionMapAnswer.ProtoReflect.Descriptor instead.
func (*CompetitionMapAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{10}
}

func (x *CompetitionMapAnswer) GetMapNumber() int64 {
	if x != nil {
		return x.MapNumber
	}
	return 0
}

func (x *CompetitionMapAnswer) GetMapNormalURL() string {
	if x != nil {
		return x.MapNormalURL
	}
	return ""
}

func (x *CompetitionMapAnswer) GetMapTacticalURL() string {
	if x != nil {
		return x.MapTacticalURL
	}
	return ""
}

func (x *CompetitionMapAnswer) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type ConfigurationGetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GuildId       string                 `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigurationGetRequest) Reset() {
	*x = ConfigurationGetRequest{}
	mi := &file_rabbitmq_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigurationGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetRequest) ProtoMessage() {}

func (x *ConfigurationGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationGetRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{11}
}

func (x *ConfigurationGetRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

type ConfigurationGetAnswer struct {
	state            protoimpl.MessageState                    `protogen:"open.v1"`
	GuildId          string                                    `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	ServerId         string                                    `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	ServerChannels   []*ConfigurationGetAnswer_ServerChannel   `protobuf:"bytes,3,rep,name=serverChannels,proto3" json:"serverChannels,omitempty"`
	NotifiedChannels []*ConfigurationGetAnswer_NotifiedChannel `protobuf:"bytes,4,rep,name=notifiedChannels,proto3" json:"notifiedChannels,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ConfigurationGetAnswer) Reset() {
	*x = ConfigurationGetAnswer{}
	mi := &file_rabbitmq_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigurationGetAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetAnswer) ProtoMessage() {}

func (x *ConfigurationGetAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetAnswer.ProtoReflect.Descriptor instead.
func (*ConfigurationGetAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{12}
}

func (x *ConfigurationGetAnswer) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ConfigurationGetAnswer) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *ConfigurationGetAnswer) GetServerChannels() []*ConfigurationGetAnswer_ServerChannel {
	if x != nil {
		return x.ServerChannels
	}
	return nil
}

func (x *ConfigurationGetAnswer) GetNotifiedChannels() []*ConfigurationGetAnswer_NotifiedChannel {
	if x != nil {
		return x.NotifiedChannels
	}
	return nil
}

type ConfigurationSetServerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GuildId       string                 `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	ChannelId     string                 `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	ServerId      string                 `protobuf:"bytes,3,opt,name=serverId,proto3" json:"serverId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigurationSetServerRequest) Reset() {
	*x = ConfigurationSetServerRequest{}
	mi := &file_rabbitmq_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigurationSetServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationSetServerRequest) ProtoMessage() {}

func (x *ConfigurationSetServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationSetServerRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationSetServerRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{13}
}

func (x *ConfigurationSetServerRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ConfigurationSetServerRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationSetServerRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

type ConfigurationSetAlmanaxRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GuildId       string                 `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	ChannelId     string                 `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Enabled       bool                   `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigurationSetAlmanaxRequest) Reset() {
	*x = ConfigurationSetAlmanaxRequest{}
	mi := &file_rabbitmq_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigurationSetAlmanaxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationSetAlmanaxRequest) ProtoMessage() {}

func (x *ConfigurationSetAlmanaxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationSetAlmanaxRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationSetAlmanaxRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{14}
}

func (x *ConfigurationSetAlmanaxRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ConfigurationSetAlmanaxRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationSetAlmanaxRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type ConfigurationSetRssRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GuildId       string                 `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	ChannelId     string                 `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	FeedId        string                 `protobuf:"bytes,3,opt,name=feedId,proto3" json:"feedId,omitempty"`
	Enabled       bool                   `protobuf:"varint,46,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigurationSetRssRequest) Reset() {
	*x = ConfigurationSetRssRequest{}
	mi := &file_rabbitmq_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigurationSetRssRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationSetRssRequest) ProtoMessage() {}

func (x *ConfigurationSetRssRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationSetRssRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationSetRssRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{15}
}

func (x *ConfigurationSetRssRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ConfigurationSetRssRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationSetRssRequest) GetFeedId() string {
	if x != nil {
		return x.FeedId
	}
	return ""
}

func (x *ConfigurationSetRssRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type ConfigurationSetTwitterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GuildId       string                 `protobuf:"bytes,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	ChannelId     string                 `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	TwitterId     string                 `protobuf:"bytes,3,opt,name=twitterId,proto3" json:"twitterId,omitempty"`
	Enabled       bool                   `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigurationSetTwitterRequest) Reset() {
	*x = ConfigurationSetTwitterRequest{}
	mi := &file_rabbitmq_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigurationSetTwitterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationSetTwitterRequest) ProtoMessage() {}

func (x *ConfigurationSetTwitterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationSetTwitterRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationSetTwitterRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{16}
}

func (x *ConfigurationSetTwitterRequest) GetGuildId() string {
	if x != nil {
		return x.GuildId
	}
	return ""
}

func (x *ConfigurationSetTwitterRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationSetTwitterRequest) GetTwitterId() string {
	if x != nil {
		return x.TwitterId
	}
	return ""
}

func (x *ConfigurationSetTwitterRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type ConfigurationSetAnswer struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	NewsChannelId   string                 `protobuf:"bytes,1,opt,name=newsChannelId,proto3" json:"newsChannelId,omitempty"`
	TargetChannelId string                 `protobuf:"bytes,2,opt,name=targetChannelId,proto3" json:"targetChannelId,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ConfigurationSetAnswer) Reset() {
	*x = ConfigurationSetAnswer{}
	mi := &file_rabbitmq_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigurationSetAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationSetAnswer) ProtoMessage() {}

func (x *ConfigurationSetAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationSetAnswer.ProtoReflect.Descriptor instead.
func (*ConfigurationSetAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{17}
}

func (x *ConfigurationSetAnswer) GetNewsChannelId() string {
	if x != nil {
		return x.NewsChannelId
	}
	return ""
}

func (x *ConfigurationSetAnswer) GetTargetChannelId() string {
	if x != nil {
		return x.TargetChannelId
	}
	return ""
}

type EncyclopediaAlmanaxRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Date          *timestamp.Timestamp   `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncyclopediaAlmanaxRequest) Reset() {
	*x = EncyclopediaAlmanaxRequest{}
	mi := &file_rabbitmq_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaAlmanaxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaAlmanaxRequest) ProtoMessage() {}

func (x *EncyclopediaAlmanaxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaAlmanaxRequest.ProtoReflect.Descriptor instead.
func (*EncyclopediaAlmanaxRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{18}
}

func (x *EncyclopediaAlmanaxRequest) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type EncyclopediaAlmanaxAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Almanax       *Almanax               `protobuf:"bytes,1,opt,name=almanax,proto3" json:"almanax,omitempty"`
	Source        *Source                `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncyclopediaAlmanaxAnswer) Reset() {
	*x = EncyclopediaAlmanaxAnswer{}
	mi := &file_rabbitmq_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaAlmanaxAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaAlmanaxAnswer) ProtoMessage() {}

func (x *EncyclopediaAlmanaxAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaAlmanaxAnswer.ProtoReflect.Descriptor instead.
func (*EncyclopediaAlmanaxAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{19}
}

func (x *EncyclopediaAlmanaxAnswer) GetAlmanax() *Almanax {
	if x != nil {
		return x.Almanax
	}
	return nil
}

func (x *EncyclopediaAlmanaxAnswer) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type EncyclopediaAlmanaxEffectRequest struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	Query         string                                       `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Date          *timestamp.Timestamp                         `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Type          EncyclopediaAlmanaxEffectRequest_RequestType `protobuf:"varint,3,opt,name=type,proto3,enum=amqp.EncyclopediaAlmanaxEffectRequest_RequestType" json:"type,omitempty"`
	Offset        int64                                        `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Size          int64                                        `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncyclopediaAlmanaxEffectRequest) Reset() {
	*x = EncyclopediaAlmanaxEffectRequest{}
	mi := &file_rabbitmq_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaAlmanaxEffectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaAlmanaxEffectRequest) ProtoMessage() {}

func (x *EncyclopediaAlmanaxEffectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaAlmanaxEffectRequest.ProtoReflect.Descriptor instead.
func (*EncyclopediaAlmanaxEffectRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{20}
}

func (x *EncyclopediaAlmanaxEffectRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *EncyclopediaAlmanaxEffectRequest) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *EncyclopediaAlmanaxEffectRequest) GetType() EncyclopediaAlmanaxEffectRequest_RequestType {
	if x != nil {
		return x.Type
	}
	return EncyclopediaAlmanaxEffectRequest_QUERY
}

func (x *EncyclopediaAlmanaxEffectRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *EncyclopediaAlmanaxEffectRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type EncyclopediaAlmanaxEffectAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Page          int64                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Pages         int64                  `protobuf:"varint,3,opt,name=pages,proto3" json:"pages,omitempty"`
	Total         int64                  `protobuf:"varint,4,opt,name=total,proto3" json:"total,omitempty"`
	Almanaxes     []*Almanax             `protobuf:"bytes,5,rep,name=almanaxes,proto3" json:"almanaxes,omitempty"`
	Source        *Source                `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncyclopediaAlmanaxEffectAnswer) Reset() {
	*x = EncyclopediaAlmanaxEffectAnswer{}
	mi := &file_rabbitmq_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaAlmanaxEffectAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaAlmanaxEffectAnswer) ProtoMessage() {}

func (x *EncyclopediaAlmanaxEffectAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaAlmanaxEffectAnswer.ProtoReflect.Descriptor instead.
func (*EncyclopediaAlmanaxEffectAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{21}
}

func (x *EncyclopediaAlmanaxEffectAnswer) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *EncyclopediaAlmanaxEffectAnswer) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *EncyclopediaAlmanaxEffectAnswer) GetPages() int64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *EncyclopediaAlmanaxEffectAnswer) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *EncyclopediaAlmanaxEffectAnswer) GetAlmanaxes() []*Almanax {
	if x != nil {
		return x.Almanaxes
	}
	return nil
}

func (x *EncyclopediaAlmanaxEffectAnswer) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type EncyclopediaAlmanaxResourceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Duration      int64                  `protobuf:"varint,1,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncyclopediaAlmanaxResourceRequest) Reset() {
	*x = EncyclopediaAlmanaxResourceRequest{}
	mi := &file_rabbitmq_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaAlmanaxResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaAlmanaxResourceRequest) ProtoMessage() {}

func (x *EncyclopediaAlmanaxResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaAlmanaxResourceRequest.ProtoReflect.Descriptor instead.
func (*EncyclopediaAlmanaxResourceRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{22}
}

func (x *EncyclopediaAlmanaxResourceRequest) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type EncyclopediaAlmanaxResourceAnswer struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	Tributes      []*EncyclopediaAlmanaxResourceAnswer_Tribute `protobuf:"bytes,1,rep,name=tributes,proto3" json:"tributes,omitempty"`
	Duration      int64                                        `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Source        *Source                                      `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncyclopediaAlmanaxResourceAnswer) Reset() {
	*x = EncyclopediaAlmanaxResourceAnswer{}
	mi := &file_rabbitmq_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaAlmanaxResourceAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaAlmanaxResourceAnswer) ProtoMessage() {}

func (x *EncyclopediaAlmanaxResourceAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaAlmanaxResourceAnswer.ProtoReflect.Descriptor instead.
func (*EncyclopediaAlmanaxResourceAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{23}
}

func (x *EncyclopediaAlmanaxResourceAnswer) GetTributes() []*EncyclopediaAlmanaxResourceAnswer_Tribute {
	if x != nil {
		return x.Tributes
	}
	return nil
}

func (x *EncyclopediaAlmanaxResourceAnswer) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *EncyclopediaAlmanaxResourceAnswer) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type EncyclopediaListRequest struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Query         string                       `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Type          EncyclopediaListRequest_Type `protobuf:"varint,2,opt,name=type,proto3,enum=amqp.EncyclopediaListRequest_Type" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncyclopediaListRequest) Reset() {
	*x = EncyclopediaListRequest{}
	mi := &file_rabbitmq_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaListRequest) ProtoMessage() {}

func (x *EncyclopediaListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaListRequest.ProtoReflect.Descriptor instead.
func (*EncyclopediaListRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{24}
}

func (x *EncyclopediaListRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *EncyclopediaListRequest) GetType() EncyclopediaListRequest_Type {
	if x != nil {
		return x.Type
	}
	return EncyclopediaListRequest_UNKNOWN
}

type EncyclopediaListAnswer struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Items         []*EncyclopediaListAnswer_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncyclopediaListAnswer) Reset() {
	*x = EncyclopediaListAnswer{}
	mi := &file_rabbitmq_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaListAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaListAnswer) ProtoMessage() {}

func (x *EncyclopediaListAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaListAnswer.ProtoReflect.Descriptor instead.
func (*EncyclopediaListAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{25}
}

func (x *EncyclopediaListAnswer) GetItems() []*EncyclopediaListAnswer_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type EncyclopediaItemRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	IsID          bool                   `protobuf:"varint,2,opt,name=isID,proto3" json:"isID,omitempty"`
	Type          ItemType               `protobuf:"varint,3,opt,name=type,proto3,enum=amqp.ItemType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncyclopediaItemRequest) Reset() {
	*x = EncyclopediaItemRequest{}
	mi := &file_rabbitmq_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemRequest) ProtoMessage() {}

func (x *EncyclopediaItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemRequest.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{26}
}

func (x *EncyclopediaItemRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *EncyclopediaItemRequest) GetIsID() bool {
	if x != nil {
		return x.IsID
	}
	return false
}

func (x *EncyclopediaItemRequest) GetType() ItemType {
	if x != nil {
		return x.Type
	}
	return ItemType_ANY_ITEM_TYPE
}

type EncyclopediaItemAnswer struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Type          ItemType                          `protobuf:"varint,1,opt,name=type,proto3,enum=amqp.ItemType" json:"type,omitempty"`
	Equipment     *EncyclopediaItemAnswer_Equipment `protobuf:"bytes,2,opt,name=equipment,proto3" json:"equipment,omitempty"`
	Set           *EncyclopediaItemAnswer_Set       `protobuf:"bytes,3,opt,name=set,proto3" json:"set,omitempty"`
	Source        *Source                           `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncyclopediaItemAnswer) Reset() {
	*x = EncyclopediaItemAnswer{}
	mi := &file_rabbitmq_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaItemAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer) ProtoMessage() {}

func (x *EncyclopediaItemAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{27}
}

func (x *EncyclopediaItemAnswer) GetType() ItemType {
	if x != nil {
		return x.Type
	}
	return ItemType_ANY_ITEM_TYPE
}

func (x *EncyclopediaItemAnswer) GetEquipment() *EncyclopediaItemAnswer_Equipment {
	if x != nil {
		return x.Equipment
	}
	return nil
}

func (x *EncyclopediaItemAnswer) GetSet() *EncyclopediaItemAnswer_Set {
	if x != nil {
		return x.Set
	}
	return nil
}

func (x *EncyclopediaItemAnswer) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type JobGetBookRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserIds       []string               `protobuf:"bytes,1,rep,name=userIds,proto3" json:"userIds,omitempty"`
	JobId         string                 `protobuf:"bytes,2,opt,name=jobId,proto3" json:"jobId,omitempty"`
	ServerId      string                 `protobuf:"bytes,3,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Offset        int64                  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Size          int64                  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobGetBookRequest) Reset() {
	*x = JobGetBookRequest{}
	mi := &file_rabbitmq_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobGetBookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetBookRequest) ProtoMessage() {}

func (x *JobGetBookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetBookRequest.ProtoReflect.Descriptor instead.
func (*JobGetBookRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{28}
}

func (x *JobGetBookRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *JobGetBookRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobGetBookRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *JobGetBookRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *JobGetBookRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type JobGetBookAnswer struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	JobId         string                        `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	ServerId      string                        `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Page          int64                         `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Pages         int64                         `protobuf:"varint,4,opt,name=pages,proto3" json:"pages,omitempty"`
	Total         int64                         `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
	Craftsmen     []*JobGetBookAnswer_Craftsman `protobuf:"bytes,6,rep,name=craftsmen,proto3" json:"craftsmen,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobGetBookAnswer) Reset() {
	*x = JobGetBookAnswer{}
	mi := &file_rabbitmq_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobGetBookAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetBookAnswer) ProtoMessage() {}

func (x *JobGetBookAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetBookAnswer.ProtoReflect.Descriptor instead.
func (*JobGetBookAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{29}
}

func (x *JobGetBookAnswer) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobGetBookAnswer) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *JobGetBookAnswer) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *JobGetBookAnswer) GetPages() int64 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *JobGetBookAnswer) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *JobGetBookAnswer) GetCraftsmen() []*JobGetBookAnswer_Craftsman {
	if x != nil {
		return x.Craftsmen
	}
	return nil
}

type JobGetUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ServerId      string                 `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobGetUserRequest) Reset() {
	*x = JobGetUserRequest{}
	mi := &file_rabbitmq_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobGetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetUserRequest) ProtoMessage() {}

func (x *JobGetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetUserRequest.ProtoReflect.Descriptor instead.
func (*JobGetUserRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{30}
}

func (x *JobGetUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JobGetUserRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

type JobGetUserAnswer struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	ServerId      string                            `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Jobs          []*JobGetUserAnswer_JobExperience `protobuf:"bytes,2,rep,name=jobs,proto3" json:"jobs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobGetUserAnswer) Reset() {
	*x = JobGetUserAnswer{}
	mi := &file_rabbitmq_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobGetUserAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetUserAnswer) ProtoMessage() {}

func (x *JobGetUserAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetUserAnswer.ProtoReflect.Descriptor instead.
func (*JobGetUserAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{31}
}

func (x *JobGetUserAnswer) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *JobGetUserAnswer) GetJobs() []*JobGetUserAnswer_JobExperience {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type JobSetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	JobId         string                 `protobuf:"bytes,2,opt,name=jobId,proto3" json:"jobId,omitempty"`
	ServerId      string                 `protobuf:"bytes,3,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Level         int64                  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobSetRequest) Reset() {
	*x = JobSetRequest{}
	mi := &file_rabbitmq_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSetRequest) ProtoMessage() {}

func (x *JobSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSetRequest.ProtoReflect.Descriptor instead.
func (*JobSetRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{32}
}

func (x *JobSetRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JobSetRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobSetRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *JobSetRequest) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type JobSetAnswer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobSetAnswer) Reset() {
	*x = JobSetAnswer{}
	mi := &file_rabbitmq_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobSetAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobSetAnswer) ProtoMessage() {}

func (x *JobSetAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobSetAnswer.ProtoReflect.Descriptor instead.
func (*JobSetAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{33}
}

type NewsAlmanaxMessage struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Almanaxes     []*NewsAlmanaxMessage_I18NAlmanax `protobuf:"bytes,1,rep,name=almanaxes,proto3" json:"almanaxes,omitempty"`
	Source        *Source                           `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewsAlmanaxMessage) Reset() {
	*x = NewsAlmanaxMessage{}
	mi := &file_rabbitmq_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewsAlmanaxMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsAlmanaxMessage) ProtoMessage() {}

func (x *NewsAlmanaxMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsAlmanaxMessage.ProtoReflect.Descriptor instead.
func (*NewsAlmanaxMessage) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{34}
}

func (x *NewsAlmanaxMessage) GetAlmanaxes() []*NewsAlmanaxMessage_I18NAlmanax {
	if x != nil {
		return x.Almanaxes
	}
	return nil
}

func (x *NewsAlmanaxMessage) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type NewsTwitterMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TwitterId     string                 `protobuf:"bytes,1,opt,name=twitterId,proto3" json:"twitterId,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Url           string                 `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	IconUrls      []string               `protobuf:"bytes,5,rep,name=iconUrls,proto3" json:"iconUrls,omitempty"`
	Date          *timestamp.Timestamp   `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewsTwitterMessage) Reset() {
	*x = NewsTwitterMessage{}
	mi := &file_rabbitmq_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewsTwitterMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsTwitterMessage) ProtoMessage() {}

func (x *NewsTwitterMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsTwitterMessage.ProtoReflect.Descriptor instead.
func (*NewsTwitterMessage) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{35}
}

func (x *NewsTwitterMessage) GetTwitterId() string {
	if x != nil {
		return x.TwitterId
	}
	return ""
}

func (x *NewsTwitterMessage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewsTwitterMessage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NewsTwitterMessage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *NewsTwitterMessage) GetIconUrls() []string {
	if x != nil {
		return x.IconUrls
	}
	return nil
}

func (x *NewsTwitterMessage) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

type NewsRSSMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	AuthorName    string                 `protobuf:"bytes,3,opt,name=authorName,proto3" json:"authorName,omitempty"`
	Url           string                 `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	IconUrl       string                 `protobuf:"bytes,5,opt,name=iconUrl,proto3" json:"iconUrl,omitempty"`
	Date          *timestamp.Timestamp   `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`
	Type          string                 `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewsRSSMessage) Reset() {
	*x = NewsRSSMessage{}
	mi := &file_rabbitmq_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewsRSSMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsRSSMessage) ProtoMessage() {}

func (x *NewsRSSMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsRSSMessage.ProtoReflect.Descriptor instead.
func (*NewsRSSMessage) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{36}
}

func (x *NewsRSSMessage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewsRSSMessage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NewsRSSMessage) GetAuthorName() string {
	if x != nil {
		return x.AuthorName
	}
	return ""
}

func (x *NewsRSSMessage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *NewsRSSMessage) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *NewsRSSMessage) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *NewsRSSMessage) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type NewsGameMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewsGameMessage) Reset() {
	*x = NewsGameMessage{}
	mi := &file_rabbitmq_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewsGameMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsGameMessage) ProtoMessage() {}

func (x *NewsGameMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsGameMessage.ProtoReflect.Descriptor instead.
func (*NewsGameMessage) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{37}
}

func (x *NewsGameMessage) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type NewsGuildMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MemberCount   int64                  `protobuf:"varint,3,opt,name=memberCount,proto3" json:"memberCount,omitempty"`
	Event         NewsGuildMessage_Event `protobuf:"varint,4,opt,name=event,proto3,enum=amqp.NewsGuildMessage_Event" json:"event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewsGuildMessage) Reset() {
	*x = NewsGuildMessage{}
	mi := &file_rabbitmq_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewsGuildMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsGuildMessage) ProtoMessage() {}

func (x *NewsGuildMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsGuildMessage.ProtoReflect.Descriptor instead.
func (*NewsGuildMessage) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{38}
}

func (x *NewsGuildMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *NewsGuildMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewsGuildMessage) GetMemberCount() int64 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *NewsGuildMessage) GetEvent() NewsGuildMessage_Event {
	if x != nil {
		return x.Event
	}
	return NewsGuildMessage_UNKNOWN
}

type NewsSetMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SetIds        []string               `protobuf:"bytes,1,rep,name=setIds,proto3" json:"setIds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewsSetMessage) Reset() {
	*x = NewsSetMessage{}
	mi := &file_rabbitmq_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewsSetMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsSetMessage) ProtoMessage() {}

func (x *NewsSetMessage) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsSetMessage.ProtoReflect.Descriptor instead.
func (*NewsSetMessage) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{39}
}

func (x *NewsSetMessage) GetSetIds() []string {
	if x != nil {
		return x.SetIds
	}
	return nil
}

type PortalPositionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ServerId      string                 `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	DimensionId   string                 `protobuf:"bytes,2,opt,name=dimensionId,proto3" json:"dimensionId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PortalPositionRequest) Reset() {
	*x = PortalPositionRequest{}
	mi := &file_rabbitmq_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortalPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionRequest) ProtoMessage() {}

func (x *PortalPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionRequest.ProtoReflect.Descriptor instead.
func (*PortalPositionRequest) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{40}
}

func (x *PortalPositionRequest) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *PortalPositionRequest) GetDimensionId() string {
	if x != nil {
		return x.DimensionId
	}
	return ""
}

type PortalPositionAnswer struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	Positions     []*PortalPositionAnswer_PortalPosition `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PortalPositionAnswer) Reset() {
	*x = PortalPositionAnswer{}
	mi := &file_rabbitmq_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortalPositionAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionAnswer) ProtoMessage() {}

func (x *PortalPositionAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionAnswer.ProtoReflect.Descriptor instead.
func (*PortalPositionAnswer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{41}
}

func (x *PortalPositionAnswer) GetPositions() []*PortalPositionAnswer_PortalPosition {
	if x != nil {
		return x.Positions
	}
	return nil
}

type Almanax_Tribute struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Item          *Almanax_Tribute_Item  `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Quantity      int64                  `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Almanax_Tribute) Reset() {
	*x = Almanax_Tribute{}
	mi := &file_rabbitmq_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Almanax_Tribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Almanax_Tribute) ProtoMessage() {}

func (x *Almanax_Tribute) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Almanax_Tribute.ProtoReflect.Descriptor instead.
func (*Almanax_Tribute) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Almanax_Tribute) GetItem() *Almanax_Tribute_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *Almanax_Tribute) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type Almanax_Tribute_Item struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Icon          string                 `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	Type          ItemType               `protobuf:"varint,3,opt,name=type,proto3,enum=amqp.ItemType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Almanax_Tribute_Item) Reset() {
	*x = Almanax_Tribute_Item{}
	mi := &file_rabbitmq_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Almanax_Tribute_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Almanax_Tribute_Item) ProtoMessage() {}

func (x *Almanax_Tribute_Item) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Almanax_Tribute_Item.ProtoReflect.Descriptor instead.
func (*Almanax_Tribute_Item) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *Almanax_Tribute_Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Almanax_Tribute_Item) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *Almanax_Tribute_Item) GetType() ItemType {
	if x != nil {
		return x.Type
	}
	return ItemType_ANY_ITEM_TYPE
}

type AlignGetBookAnswer_Believer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CityId        string                 `protobuf:"bytes,1,opt,name=cityId,proto3" json:"cityId,omitempty"`
	OrderId       string                 `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	UserId        string                 `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	Level         int64                  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlignGetBookAnswer_Believer) Reset() {
	*x = AlignGetBookAnswer_Believer{}
	mi := &file_rabbitmq_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlignGetBookAnswer_Believer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignGetBookAnswer_Believer) ProtoMessage() {}

func (x *AlignGetBookAnswer_Believer) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignGetBookAnswer_Believer.ProtoReflect.Descriptor instead.
func (*AlignGetBookAnswer_Believer) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{4, 0}
}

func (x *AlignGetBookAnswer_Believer) GetCityId() string {
	if x != nil {
		return x.CityId
	}
	return ""
}

func (x *AlignGetBookAnswer_Believer) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AlignGetBookAnswer_Believer) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AlignGetBookAnswer_Believer) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type AlignGetUserAnswer_AlignExperience struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CityId        string                 `protobuf:"bytes,1,opt,name=cityId,proto3" json:"cityId,omitempty"`
	OrderId       string                 `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Level         int64                  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AlignGetUserAnswer_AlignExperience) Reset() {
	*x = AlignGetUserAnswer_AlignExperience{}
	mi := &file_rabbitmq_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AlignGetUserAnswer_AlignExperience) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlignGetUserAnswer_AlignExperience) ProtoMessage() {}

func (x *AlignGetUserAnswer_AlignExperience) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlignGetUserAnswer_AlignExperience.ProtoReflect.Descriptor instead.
func (*AlignGetUserAnswer_AlignExperience) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{6, 0}
}

func (x *AlignGetUserAnswer_AlignExperience) GetCityId() string {
	if x != nil {
		return x.CityId
	}
	return ""
}

func (x *AlignGetUserAnswer_AlignExperience) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *AlignGetUserAnswer_AlignExperience) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type ConfigurationGetAnswer_ServerChannel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelId     string                 `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	ServerId      string                 `protobuf:"bytes,2,opt,name=serverId,proto3" json:"serverId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigurationGetAnswer_ServerChannel) Reset() {
	*x = ConfigurationGetAnswer_ServerChannel{}
	mi := &file_rabbitmq_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigurationGetAnswer_ServerChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetAnswer_ServerChannel) ProtoMessage() {}

func (x *ConfigurationGetAnswer_ServerChannel) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetAnswer_ServerChannel.ProtoReflect.Descriptor instead.
func (*ConfigurationGetAnswer_ServerChannel) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ConfigurationGetAnswer_ServerChannel) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationGetAnswer_ServerChannel) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

type ConfigurationGetAnswer_NotifiedChannel struct {
	state            protoimpl.MessageState                                  `protogen:"open.v1"`
	ChannelId        string                                                  `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	NotificationType ConfigurationGetAnswer_NotifiedChannel_NotificationType `protobuf:"varint,2,opt,name=notificationType,proto3,enum=amqp.ConfigurationGetAnswer_NotifiedChannel_NotificationType" json:"notificationType,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ConfigurationGetAnswer_NotifiedChannel) Reset() {
	*x = ConfigurationGetAnswer_NotifiedChannel{}
	mi := &file_rabbitmq_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigurationGetAnswer_NotifiedChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationGetAnswer_NotifiedChannel) ProtoMessage() {}

func (x *ConfigurationGetAnswer_NotifiedChannel) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationGetAnswer_NotifiedChannel.ProtoReflect.Descriptor instead.
func (*ConfigurationGetAnswer_NotifiedChannel) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{12, 1}
}

func (x *ConfigurationGetAnswer_NotifiedChannel) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ConfigurationGetAnswer_NotifiedChannel) GetNotificationType() ConfigurationGetAnswer_NotifiedChannel_NotificationType {
	if x != nil {
		return x.NotificationType
	}
	return ConfigurationGetAnswer_NotifiedChannel_UNKNOWN
}

type EncyclopediaAlmanaxResourceAnswer_Tribute struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ItemName      string                 `protobuf:"bytes,1,opt,name=itemName,proto3" json:"itemName,omitempty"`
	ItemType      ItemType               `protobuf:"varint,2,opt,name=itemType,proto3,enum=amqp.ItemType" json:"itemType,omitempty"`
	Quantity      int64                  `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncyclopediaAlmanaxResourceAnswer_Tribute) Reset() {
	*x = EncyclopediaAlmanaxResourceAnswer_Tribute{}
	mi := &file_rabbitmq_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaAlmanaxResourceAnswer_Tribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaAlmanaxResourceAnswer_Tribute) ProtoMessage() {}

func (x *EncyclopediaAlmanaxResourceAnswer_Tribute) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaAlmanaxResourceAnswer_Tribute.ProtoReflect.Descriptor instead.
func (*EncyclopediaAlmanaxResourceAnswer_Tribute) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{23, 0}
}

func (x *EncyclopediaAlmanaxResourceAnswer_Tribute) GetItemName() string {
	if x != nil {
		return x.ItemName
	}
	return ""
}

func (x *EncyclopediaAlmanaxResourceAnswer_Tribute) GetItemType() ItemType {
	if x != nil {
		return x.ItemType
	}
	return ItemType_ANY_ITEM_TYPE
}

func (x *EncyclopediaAlmanaxResourceAnswer_Tribute) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type EncyclopediaListAnswer_Item struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncyclopediaListAnswer_Item) Reset() {
	*x = EncyclopediaListAnswer_Item{}
	mi := &file_rabbitmq_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaListAnswer_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaListAnswer_Item) ProtoMessage() {}

func (x *EncyclopediaListAnswer_Item) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaListAnswer_Item.ProtoReflect.Descriptor instead.
func (*EncyclopediaListAnswer_Item) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{25, 0}
}

func (x *EncyclopediaListAnswer_Item) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncyclopediaListAnswer_Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EncyclopediaItemAnswer_Equipment struct {
	state           protoimpl.MessageState                            `protogen:"open.v1"`
	Id              string                                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string                                            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description     string                                            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Type            *EncyclopediaItemAnswer_Equipment_Type            `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Icon            string                                            `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	Level           int64                                             `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	Pods            int64                                             `protobuf:"varint,7,opt,name=pods,proto3" json:"pods,omitempty"`
	Set             *EncyclopediaItemAnswer_Equipment_SetFamily       `protobuf:"bytes,8,opt,name=set,proto3" json:"set,omitempty"`
	Characteristics *EncyclopediaItemAnswer_Equipment_Characteristics `protobuf:"bytes,9,opt,name=characteristics,proto3" json:"characteristics,omitempty"`
	WeaponEffects   []*EncyclopediaItemAnswer_Effect                  `protobuf:"bytes,10,rep,name=weaponEffects,proto3" json:"weaponEffects,omitempty"`
	Effects         []*EncyclopediaItemAnswer_Effect                  `protobuf:"bytes,11,rep,name=effects,proto3" json:"effects,omitempty"`
	Conditions      *EncyclopediaItemAnswer_Conditions                `protobuf:"bytes,12,opt,name=conditions,proto3" json:"conditions,omitempty"`
	Recipe          *EncyclopediaItemAnswer_Recipe                    `protobuf:"bytes,13,opt,name=recipe,proto3" json:"recipe,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EncyclopediaItemAnswer_Equipment) Reset() {
	*x = EncyclopediaItemAnswer_Equipment{}
	mi := &file_rabbitmq_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaItemAnswer_Equipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Equipment) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Equipment) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Equipment.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Equipment) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{27, 0}
}

func (x *EncyclopediaItemAnswer_Equipment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Equipment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Equipment) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Equipment) GetType() *EncyclopediaItemAnswer_Equipment_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *EncyclopediaItemAnswer_Equipment) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Equipment) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *EncyclopediaItemAnswer_Equipment) GetPods() int64 {
	if x != nil {
		return x.Pods
	}
	return 0
}

func (x *EncyclopediaItemAnswer_Equipment) GetSet() *EncyclopediaItemAnswer_Equipment_SetFamily {
	if x != nil {
		return x.Set
	}
	return nil
}

func (x *EncyclopediaItemAnswer_Equipment) GetCharacteristics() *EncyclopediaItemAnswer_Equipment_Characteristics {
	if x != nil {
		return x.Characteristics
	}
	return nil
}

func (x *EncyclopediaItemAnswer_Equipment) GetWeaponEffects() []*EncyclopediaItemAnswer_Effect {
	if x != nil {
		return x.WeaponEffects
	}
	return nil
}

func (x *EncyclopediaItemAnswer_Equipment) GetEffects() []*EncyclopediaItemAnswer_Effect {
	if x != nil {
		return x.Effects
	}
	return nil
}

func (x *EncyclopediaItemAnswer_Equipment) GetConditions() *EncyclopediaItemAnswer_Conditions {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *EncyclopediaItemAnswer_Equipment) GetRecipe() *EncyclopediaItemAnswer_Recipe {
	if x != nil {
		return x.Recipe
	}
	return nil
}

type EncyclopediaItemAnswer_Set struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Id            string                                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon          string                                  `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Level         int64                                   `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	IsCosmetic    bool                                    `protobuf:"varint,5,opt,name=isCosmetic,proto3" json:"isCosmetic,omitempty"`
	Equipments    []*EncyclopediaItemAnswer_Set_Equipment `protobuf:"bytes,6,rep,name=equipments,proto3" json:"equipments,omitempty"`
	Bonuses       []*EncyclopediaItemAnswer_Set_Bonus     `protobuf:"bytes,7,rep,name=bonuses,proto3" json:"bonuses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncyclopediaItemAnswer_Set) Reset() {
	*x = EncyclopediaItemAnswer_Set{}
	mi := &file_rabbitmq_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaItemAnswer_Set) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Set) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Set) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Set.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Set) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{27, 1}
}

func (x *EncyclopediaItemAnswer_Set) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Set) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Set) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Set) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *EncyclopediaItemAnswer_Set) GetIsCosmetic() bool {
	if x != nil {
		return x.IsCosmetic
	}
	return false
}

func (x *EncyclopediaItemAnswer_Set) GetEquipments() []*EncyclopediaItemAnswer_Set_Equipment {
	if x != nil {
		return x.Equipments
	}
	return nil
}

func (x *EncyclopediaItemAnswer_Set) GetBonuses() []*EncyclopediaItemAnswer_Set_Bonus {
	if x != nil {
		return x.Bonuses
	}
	return nil
}

type EncyclopediaItemAnswer_Effect struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Label         string                 `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncyclopediaItemAnswer_Effect) Reset() {
	*x = EncyclopediaItemAnswer_Effect{}
	mi := &file_rabbitmq_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaItemAnswer_Effect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Effect) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Effect) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Effect.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Effect) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{27, 2}
}

func (x *EncyclopediaItemAnswer_Effect) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Effect) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type EncyclopediaItemAnswer_Conditions struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	Relation      EncyclopediaItemAnswer_Conditions_Relation   `protobuf:"varint,1,opt,name=relation,proto3,enum=amqp.EncyclopediaItemAnswer_Conditions_Relation" json:"relation,omitempty"`
	Children      []*EncyclopediaItemAnswer_Conditions         `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
	Condition     *EncyclopediaItemAnswer_Conditions_Condition `protobuf:"bytes,3,opt,name=condition,proto3" json:"condition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncyclopediaItemAnswer_Conditions) Reset() {
	*x = EncyclopediaItemAnswer_Conditions{}
	mi := &file_rabbitmq_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaItemAnswer_Conditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Conditions) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Conditions) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Conditions.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Conditions) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{27, 3}
}

func (x *EncyclopediaItemAnswer_Conditions) GetRelation() EncyclopediaItemAnswer_Conditions_Relation {
	if x != nil {
		return x.Relation
	}
	return EncyclopediaItemAnswer_Conditions_NONE
}

func (x *EncyclopediaItemAnswer_Conditions) GetChildren() []*EncyclopediaItemAnswer_Conditions {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *EncyclopediaItemAnswer_Conditions) GetCondition() *EncyclopediaItemAnswer_Conditions_Condition {
	if x != nil {
		return x.Condition
	}
	return nil
}

type EncyclopediaItemAnswer_Recipe struct {
	state         protoimpl.MessageState                      `protogen:"open.v1"`
	Ingredients   []*EncyclopediaItemAnswer_Recipe_Ingredient `protobuf:"bytes,1,rep,name=ingredients,proto3" json:"ingredients,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncyclopediaItemAnswer_Recipe) Reset() {
	*x = EncyclopediaItemAnswer_Recipe{}
	mi := &file_rabbitmq_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaItemAnswer_Recipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Recipe) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Recipe) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Recipe.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Recipe) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{27, 4}
}

func (x *EncyclopediaItemAnswer_Recipe) GetIngredients() []*EncyclopediaItemAnswer_Recipe_Ingredient {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

type EncyclopediaItemAnswer_Equipment_Characteristics struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Cost           int64                  `protobuf:"varint,1,opt,name=cost,proto3" json:"cost,omitempty"`
	MinRange       int64                  `protobuf:"varint,2,opt,name=minRange,proto3" json:"minRange,omitempty"`
	MaxRange       int64                  `protobuf:"varint,3,opt,name=maxRange,proto3" json:"maxRange,omitempty"`
	MaxCastPerTurn int64                  `protobuf:"varint,4,opt,name=maxCastPerTurn,proto3" json:"maxCastPerTurn,omitempty"`
	CriticalRate   int64                  `protobuf:"varint,5,opt,name=criticalRate,proto3" json:"criticalRate,omitempty"`
	CriticalBonus  int64                  `protobuf:"varint,6,opt,name=criticalBonus,proto3" json:"criticalBonus,omitempty"`
	Areas          []string               `protobuf:"bytes,7,rep,name=areas,proto3" json:"areas,omitempty"` //TODO
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EncyclopediaItemAnswer_Equipment_Characteristics) Reset() {
	*x = EncyclopediaItemAnswer_Equipment_Characteristics{}
	mi := &file_rabbitmq_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaItemAnswer_Equipment_Characteristics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Equipment_Characteristics) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Equipment_Characteristics) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Equipment_Characteristics.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Equipment_Characteristics) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{27, 0, 0}
}

func (x *EncyclopediaItemAnswer_Equipment_Characteristics) GetCost() int64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *EncyclopediaItemAnswer_Equipment_Characteristics) GetMinRange() int64 {
	if x != nil {
		return x.MinRange
	}
	return 0
}

func (x *EncyclopediaItemAnswer_Equipment_Characteristics) GetMaxRange() int64 {
	if x != nil {
		return x.MaxRange
	}
	return 0
}

func (x *EncyclopediaItemAnswer_Equipment_Characteristics) GetMaxCastPerTurn() int64 {
	if x != nil {
		return x.MaxCastPerTurn
	}
	return 0
}

func (x *EncyclopediaItemAnswer_Equipment_Characteristics) GetCriticalRate() int64 {
	if x != nil {
		return x.CriticalRate
	}
	return 0
}

func (x *EncyclopediaItemAnswer_Equipment_Characteristics) GetCriticalBonus() int64 {
	if x != nil {
		return x.CriticalBonus
	}
	return 0
}

func (x *EncyclopediaItemAnswer_Equipment_Characteristics) GetAreas() []string {
	if x != nil {
		return x.Areas
	}
	return nil
}

type EncyclopediaItemAnswer_Equipment_Type struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ItemType       ItemType               `protobuf:"varint,1,opt,name=itemType,proto3,enum=amqp.ItemType" json:"itemType,omitempty"`
	EquipmentType  EquipmentType          `protobuf:"varint,2,opt,name=equipmentType,proto3,enum=amqp.EquipmentType" json:"equipmentType,omitempty"`
	EquipmentLabel string                 `protobuf:"bytes,3,opt,name=equipmentLabel,proto3" json:"equipmentLabel,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EncyclopediaItemAnswer_Equipment_Type) Reset() {
	*x = EncyclopediaItemAnswer_Equipment_Type{}
	mi := &file_rabbitmq_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaItemAnswer_Equipment_Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Equipment_Type) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Equipment_Type) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Equipment_Type.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Equipment_Type) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{27, 0, 1}
}

func (x *EncyclopediaItemAnswer_Equipment_Type) GetItemType() ItemType {
	if x != nil {
		return x.ItemType
	}
	return ItemType_ANY_ITEM_TYPE
}

func (x *EncyclopediaItemAnswer_Equipment_Type) GetEquipmentType() EquipmentType {
	if x != nil {
		return x.EquipmentType
	}
	return EquipmentType_NONE
}

func (x *EncyclopediaItemAnswer_Equipment_Type) GetEquipmentLabel() string {
	if x != nil {
		return x.EquipmentLabel
	}
	return ""
}

type EncyclopediaItemAnswer_Equipment_SetFamily struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncyclopediaItemAnswer_Equipment_SetFamily) Reset() {
	*x = EncyclopediaItemAnswer_Equipment_SetFamily{}
	mi := &file_rabbitmq_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaItemAnswer_Equipment_SetFamily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Equipment_SetFamily) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Equipment_SetFamily) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Equipment_SetFamily.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Equipment_SetFamily) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{27, 0, 2}
}

func (x *EncyclopediaItemAnswer_Equipment_SetFamily) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Equipment_SetFamily) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EncyclopediaItemAnswer_Set_Equipment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type          EquipmentType          `protobuf:"varint,3,opt,name=type,proto3,enum=amqp.EquipmentType" json:"type,omitempty"`
	Level         int64                  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncyclopediaItemAnswer_Set_Equipment) Reset() {
	*x = EncyclopediaItemAnswer_Set_Equipment{}
	mi := &file_rabbitmq_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaItemAnswer_Set_Equipment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Set_Equipment) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Set_Equipment) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Set_Equipment.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Set_Equipment) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{27, 1, 0}
}

func (x *EncyclopediaItemAnswer_Set_Equipment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Set_Equipment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Set_Equipment) GetType() EquipmentType {
	if x != nil {
		return x.Type
	}
	return EquipmentType_NONE
}

func (x *EncyclopediaItemAnswer_Set_Equipment) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type EncyclopediaItemAnswer_Set_Bonus struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	ItemNumber    int64                            `protobuf:"varint,1,opt,name=itemNumber,proto3" json:"itemNumber,omitempty"`
	Effects       []*EncyclopediaItemAnswer_Effect `protobuf:"bytes,2,rep,name=effects,proto3" json:"effects,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncyclopediaItemAnswer_Set_Bonus) Reset() {
	*x = EncyclopediaItemAnswer_Set_Bonus{}
	mi := &file_rabbitmq_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaItemAnswer_Set_Bonus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Set_Bonus) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Set_Bonus) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Set_Bonus.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Set_Bonus) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{27, 1, 1}
}

func (x *EncyclopediaItemAnswer_Set_Bonus) GetItemNumber() int64 {
	if x != nil {
		return x.ItemNumber
	}
	return 0
}

func (x *EncyclopediaItemAnswer_Set_Bonus) GetEffects() []*EncyclopediaItemAnswer_Effect {
	if x != nil {
		return x.Effects
	}
	return nil
}

type EncyclopediaItemAnswer_Conditions_Condition struct {
	state         protoimpl.MessageState                               `protogen:"open.v1"`
	Operator      string                                               `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	Value         int64                                                `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Element       *EncyclopediaItemAnswer_Conditions_Condition_Element `protobuf:"bytes,3,opt,name=element,proto3" json:"element,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncyclopediaItemAnswer_Conditions_Condition) Reset() {
	*x = EncyclopediaItemAnswer_Conditions_Condition{}
	mi := &file_rabbitmq_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaItemAnswer_Conditions_Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Conditions_Condition) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Conditions_Condition) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Conditions_Condition.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Conditions_Condition) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{27, 3, 0}
}

func (x *EncyclopediaItemAnswer_Conditions_Condition) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Conditions_Condition) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *EncyclopediaItemAnswer_Conditions_Condition) GetElement() *EncyclopediaItemAnswer_Conditions_Condition_Element {
	if x != nil {
		return x.Element
	}
	return nil
}

type EncyclopediaItemAnswer_Conditions_Condition_Element struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncyclopediaItemAnswer_Conditions_Condition_Element) Reset() {
	*x = EncyclopediaItemAnswer_Conditions_Condition_Element{}
	mi := &file_rabbitmq_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaItemAnswer_Conditions_Condition_Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Conditions_Condition_Element) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Conditions_Condition_Element) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Conditions_Condition_Element.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Conditions_Condition_Element) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{27, 3, 0, 0}
}

func (x *EncyclopediaItemAnswer_Conditions_Condition_Element) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Conditions_Condition_Element) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EncyclopediaItemAnswer_Recipe_Ingredient struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Quantity      int64                  `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Type          ItemType               `protobuf:"varint,4,opt,name=type,proto3,enum=amqp.ItemType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncyclopediaItemAnswer_Recipe_Ingredient) Reset() {
	*x = EncyclopediaItemAnswer_Recipe_Ingredient{}
	mi := &file_rabbitmq_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncyclopediaItemAnswer_Recipe_Ingredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncyclopediaItemAnswer_Recipe_Ingredient) ProtoMessage() {}

func (x *EncyclopediaItemAnswer_Recipe_Ingredient) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncyclopediaItemAnswer_Recipe_Ingredient.ProtoReflect.Descriptor instead.
func (*EncyclopediaItemAnswer_Recipe_Ingredient) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{27, 4, 0}
}

func (x *EncyclopediaItemAnswer_Recipe_Ingredient) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Recipe_Ingredient) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EncyclopediaItemAnswer_Recipe_Ingredient) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *EncyclopediaItemAnswer_Recipe_Ingredient) GetType() ItemType {
	if x != nil {
		return x.Type
	}
	return ItemType_ANY_ITEM_TYPE
}

type JobGetBookAnswer_Craftsman struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Level         int64                  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobGetBookAnswer_Craftsman) Reset() {
	*x = JobGetBookAnswer_Craftsman{}
	mi := &file_rabbitmq_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobGetBookAnswer_Craftsman) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetBookAnswer_Craftsman) ProtoMessage() {}

func (x *JobGetBookAnswer_Craftsman) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetBookAnswer_Craftsman.ProtoReflect.Descriptor instead.
func (*JobGetBookAnswer_Craftsman) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{29, 0}
}

func (x *JobGetBookAnswer_Craftsman) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *JobGetBookAnswer_Craftsman) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type JobGetUserAnswer_JobExperience struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	Level         int64                  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobGetUserAnswer_JobExperience) Reset() {
	*x = JobGetUserAnswer_JobExperience{}
	mi := &file_rabbitmq_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobGetUserAnswer_JobExperience) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobGetUserAnswer_JobExperience) ProtoMessage() {}

func (x *JobGetUserAnswer_JobExperience) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobGetUserAnswer_JobExperience.ProtoReflect.Descriptor instead.
func (*JobGetUserAnswer_JobExperience) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{31, 0}
}

func (x *JobGetUserAnswer_JobExperience) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobGetUserAnswer_JobExperience) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type NewsAlmanaxMessage_I18NAlmanax struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Almanax       *Almanax               `protobuf:"bytes,1,opt,name=almanax,proto3" json:"almanax,omitempty"`
	Locale        Language               `protobuf:"varint,2,opt,name=locale,proto3,enum=amqp.Language" json:"locale,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewsAlmanaxMessage_I18NAlmanax) Reset() {
	*x = NewsAlmanaxMessage_I18NAlmanax{}
	mi := &file_rabbitmq_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewsAlmanaxMessage_I18NAlmanax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsAlmanaxMessage_I18NAlmanax) ProtoMessage() {}

func (x *NewsAlmanaxMessage_I18NAlmanax) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsAlmanaxMessage_I18NAlmanax.ProtoReflect.Descriptor instead.
func (*NewsAlmanaxMessage_I18NAlmanax) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{34, 0}
}

func (x *NewsAlmanaxMessage_I18NAlmanax) GetAlmanax() *Almanax {
	if x != nil {
		return x.Almanax
	}
	return nil
}

func (x *NewsAlmanaxMessage_I18NAlmanax) GetLocale() Language {
	if x != nil {
		return x.Locale
	}
	return Language_ANY
}

type PortalPositionAnswer_PortalPosition struct {
	state         protoimpl.MessageState                        `protogen:"open.v1"`
	ServerId      string                                        `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	DimensionId   string                                        `protobuf:"bytes,2,opt,name=dimensionId,proto3" json:"dimensionId,omitempty"`
	RemainingUses int64                                         `protobuf:"varint,3,opt,name=remainingUses,proto3" json:"remainingUses,omitempty"`
	Position      *PortalPositionAnswer_PortalPosition_Position `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	CreatedBy     string                                        `protobuf:"bytes,5,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	UpdatedBy     string                                        `protobuf:"bytes,6,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	CreatedAt     *timestamp.Timestamp                          `protobuf:"bytes,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt     *timestamp.Timestamp                          `protobuf:"bytes,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Source        *Source                                       `protobuf:"bytes,9,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PortalPositionAnswer_PortalPosition) Reset() {
	*x = PortalPositionAnswer_PortalPosition{}
	mi := &file_rabbitmq_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortalPositionAnswer_PortalPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionAnswer_PortalPosition) ProtoMessage() {}

func (x *PortalPositionAnswer_PortalPosition) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionAnswer_PortalPosition.ProtoReflect.Descriptor instead.
func (*PortalPositionAnswer_PortalPosition) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{41, 0}
}

func (x *PortalPositionAnswer_PortalPosition) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition) GetDimensionId() string {
	if x != nil {
		return x.DimensionId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition) GetRemainingUses() int64 {
	if x != nil {
		return x.RemainingUses
	}
	return 0
}

func (x *PortalPositionAnswer_PortalPosition) GetPosition() *PortalPositionAnswer_PortalPosition_Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *PortalPositionAnswer_PortalPosition) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PortalPositionAnswer_PortalPosition) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PortalPositionAnswer_PortalPosition) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type PortalPositionAnswer_PortalPosition_Position struct {
	state                protoimpl.MessageState                                  `protogen:"open.v1"`
	X                    int64                                                   `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    int64                                                   `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	IsInCanopy           bool                                                    `protobuf:"varint,3,opt,name=isInCanopy,proto3" json:"isInCanopy,omitempty"`
	Transport            *PortalPositionAnswer_PortalPosition_Position_Transport `protobuf:"bytes,4,opt,name=transport,proto3" json:"transport,omitempty"`
	ConditionalTransport *PortalPositionAnswer_PortalPosition_Position_Transport `protobuf:"bytes,5,opt,name=conditionalTransport,proto3" json:"conditionalTransport,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *PortalPositionAnswer_PortalPosition_Position) Reset() {
	*x = PortalPositionAnswer_PortalPosition_Position{}
	mi := &file_rabbitmq_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortalPositionAnswer_PortalPosition_Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionAnswer_PortalPosition_Position) ProtoMessage() {}

func (x *PortalPositionAnswer_PortalPosition_Position) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionAnswer_PortalPosition_Position.ProtoReflect.Descriptor instead.
func (*PortalPositionAnswer_PortalPosition_Position) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{41, 0, 0}
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetX() int64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetY() int64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetIsInCanopy() bool {
	if x != nil {
		return x.IsInCanopy
	}
	return false
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetTransport() *PortalPositionAnswer_PortalPosition_Position_Transport {
	if x != nil {
		return x.Transport
	}
	return nil
}

func (x *PortalPositionAnswer_PortalPosition_Position) GetConditionalTransport() *PortalPositionAnswer_PortalPosition_Position_Transport {
	if x != nil {
		return x.ConditionalTransport
	}
	return nil
}

type PortalPositionAnswer_PortalPosition_Position_Transport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AreaId        string                 `protobuf:"bytes,1,opt,name=areaId,proto3" json:"areaId,omitempty"`
	SubAreaId     string                 `protobuf:"bytes,2,opt,name=subAreaId,proto3" json:"subAreaId,omitempty"`
	TypeId        string                 `protobuf:"bytes,3,opt,name=typeId,proto3" json:"typeId,omitempty"`
	X             int64                  `protobuf:"varint,4,opt,name=x,proto3" json:"x,omitempty"`
	Y             int64                  `protobuf:"varint,5,opt,name=y,proto3" json:"y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) Reset() {
	*x = PortalPositionAnswer_PortalPosition_Position_Transport{}
	mi := &file_rabbitmq_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortalPositionAnswer_PortalPosition_Position_Transport) ProtoMessage() {}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) ProtoReflect() protoreflect.Message {
	mi := &file_rabbitmq_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortalPositionAnswer_PortalPosition_Position_Transport.ProtoReflect.Descriptor instead.
func (*PortalPositionAnswer_PortalPosition_Position_Transport) Descriptor() ([]byte, []int) {
	return file_rabbitmq_proto_rawDescGZIP(), []int{41, 0, 0, 0}
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetAreaId() string {
	if x != nil {
		return x.AreaId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetSubAreaId() string {
	if x != nil {
		return x.SubAreaId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetTypeId() string {
	if x != nil {
		return x.TypeId
	}
	return ""
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetX() int64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *PortalPositionAnswer_PortalPosition_Position_Transport) GetY() int64 {
	if x != nil {
		return x.Y
	}
	return 0
}

var File_rabbitmq_proto protoreflect.FileDescriptor

const file_rabbitmq_proto_rawDesc = "" +
	"\n" +
	"\x0erabbitmq.proto\x12\x04amqp\x1a\x1fgoogle/protobuf/timestamp.proto\"\x86%\n" +
	"\x0fRabbitMQMessage\x12.\n" +
	"\x04type\x18\x01 \x01(\x0e2\x1a.amqp.RabbitMQMessage.TypeR\x04type\x12*\n" +
	"\blanguage\x18\x02 \x01(\x0e2\x0e.amqp.LanguageR\blanguage\x124\n" +
	"\x06status\x18\x03 \x01(\x0e2\x1c.amqp.RabbitMQMessage.StatusR\x06status\x12\x1e\n" +
	"\x04game\x18\x04 \x01(\x0e2\n" +
	".amqp.GameR\x04game\x12\x16\n" +
	"\x06userID\x18\x05 \x01(\tR\x06userID\x12K\n" +
	"\x13alignGetBookRequest\x18d \x01(\v2\x19.amqp.AlignGetBookRequestR\x13alignGetBookRequest\x12H\n" +
	"\x12alignGetBookAnswer\x18e \x01(\v2\x18.amqp.AlignGetBookAnswerR\x12alignGetBookAnswer\x12K\n" +
	"\x13alignGetUserRequest\x18f \x01(\v2\x19.amqp.AlignGetUserRequestR\x13alignGetUserRequest\x12H\n" +
	"\x12alignGetUserAnswer\x18g \x01(\v2\x18.amqp.AlignGetUserAnswerR\x12alignGetUserAnswer\x12?\n" +
	"\x0falignSetRequest\x18h \x01(\v2\x15.amqp.AlignSetRequestR\x0falignSetRequest\x12<\n" +
	"\x0ealignSetAnswer\x18i \x01(\v2\x14.amqp.AlignSetAnswerR\x0ealignSetAnswer\x12R\n" +
	"\x15competitionMapRequest\x18\xc8\x01 \x01(\v2\x1b.amqp.CompetitionMapRequestR\x15competitionMapRequest\x12O\n" +
	"\x14competitionMapAnswer\x18\xc9\x01 \x01(\v2\x1a.amqp.CompetitionMapAnswerR\x14competitionMapAnswer\x12X\n" +
	"\x17configurationGetRequest\x18\xac\x02 \x01(\v2\x1d.amqp.ConfigurationGetRequestR\x17configurationGetRequest\x12U\n" +
	"\x16configurationGetAnswer\x18\xad\x02 \x01(\v2\x1c.amqp.ConfigurationGetAnswerR\x16configurationGetAnswer\x12j\n" +
	"\x1dconfigurationSetServerRequest\x18\xae\x02 \x01(\v2#.amqp.ConfigurationSetServerRequestR\x1dconfigurationSetServerRequest\x12m\n" +
	"\x1econfigurationSetAlmanaxRequest\x18\xaf\x02 \x01(\v2$.amqp.ConfigurationSetAlmanaxRequestR\x1econfigurationSetAlmanaxRequest\x12a\n" +
	"\x1aconfigurationSetRssRequest\x18\xb0\x02 \x01(\v2 .amqp.ConfigurationSetRssRequestR\x1aconfigurationSetRssRequest\x12m\n" +
	"\x1econfigurationSetTwitterRequest\x18\xb1\x02 \x01(\v2$.amqp.ConfigurationSetTwitterRequestR\x1econfigurationSetTwitterRequest\x12U\n" +
	"\x16configurationSetAnswer\x18\xde\x02 \x01(\v2\x1c.amqp.ConfigurationSetAnswerR\x16configurationSetAnswer\x12a\n" +
	"\x1aencyclopediaAlmanaxRequest\x18\x90\x03 \x01(\v2 .amqp.EncyclopediaAlmanaxRequestR\x1aencyclopediaAlmanaxRequest\x12^\n" +
	"\x19encyclopediaAlmanaxAnswer\x18\x91\x03 \x01(\v2\x1f.amqp.EncyclopediaAlmanaxAnswerR\x19encyclopediaAlmanaxAnswer\x12y\n" +
	"\"encyclopediaAlmanaxResourceRequest\x18\x92\x03 \x01(\v2(.amqp.EncyclopediaAlmanaxResourceRequestR\"encyclopediaAlmanaxResourceRequest\x12v\n" +
	"!encyclopediaAlmanaxResourceAnswer\x18\x93\x03 \x01(\v2'.amqp.EncyclopediaAlmanaxResourceAnswerR!encyclopediaAlmanaxResourceAnswer\x12s\n" +
	" encyclopediaAlmanaxEffectRequest\x18\x94\x03 \x01(\v2&.amqp.EncyclopediaAlmanaxEffectRequestR encyclopediaAlmanaxEffectRequest\x12p\n" +
	"\x1fencyclopediaAlmanaxEffectAnswer\x18\x95\x03 \x01(\v2%.amqp.EncyclopediaAlmanaxEffectAnswerR\x1fencyclopediaAlmanaxEffectAnswer\x12X\n" +
	"\x17encyclopediaListRequest\x18\x96\x03 \x01(\v2\x1d.amqp.EncyclopediaListRequestR\x17encyclopediaListRequest\x12U\n" +
	"\x16encyclopediaListAnswer\x18\x97\x03 \x01(\v2\x1c.amqp.EncyclopediaListAnswerR\x16encyclopediaListAnswer\x12X\n" +
	"\x17encyclopediaItemRequest\x18\x98\x03 \x01(\v2\x1d.amqp.EncyclopediaItemRequestR\x17encyclopediaItemRequest\x12U\n" +
	"\x16encyclopediaItemAnswer\x18\x99\x03 \x01(\v2\x1c.amqp.EncyclopediaItemAnswerR\x16encyclopediaItemAnswer\x12F\n" +
	"\x11jobGetBookRequest\x18\xf4\x03 \x01(\v2\x17.amqp.JobGetBookRequestR\x11jobGetBookRequest\x12C\n" +
	"\x10jobGetBookAnswer\x18\xf5\x03 \x01(\v2\x16.amqp.JobGetBookAnswerR\x10jobGetBookAnswer\x12F\n" +
	"\x11jobGetUserRequest\x18\xf6\x03 \x01(\v2\x17.amqp.JobGetUserRequestR\x11jobGetUserRequest\x12C\n" +
	"\x10jobGetUserAnswer\x18\xf7\x03 \x01(\v2\x16.amqp.JobGetUserAnswerR\x10jobGetUserAnswer\x12:\n" +
	"\rjobSetRequest\x18\xf8\x03 \x01(\v2\x13.amqp.JobSetRequestR\rjobSetRequest\x127\n" +
	"\fjobSetAnswer\x18\xf9\x03 \x01(\v2\x12.amqp.JobSetAnswerR\fjobSetAnswer\x12I\n" +
	"\x12newsAlmanaxMessage\x18\xd8\x04 \x01(\v2\x18.amqp.NewsAlmanaxMessageR\x12newsAlmanaxMessage\x12@\n" +
	"\x0fnewsGameMessage\x18\xd9\x04 \x01(\v2\x15.amqp.NewsGameMessageR\x0fnewsGameMessage\x12C\n" +
	"\x10newsGuildMessage\x18\xda\x04 \x01(\v2\x16.amqp.NewsGuildMessageR\x10newsGuildMessage\x12=\n" +
	"\x0enewsRSSMessage\x18\xdb\x04 \x01(\v2\x14.amqp.NewsRSSMessageR\x0enewsRSSMessage\x12=\n" +
	"\x0enewsSetMessage\x18\xdc\x04 \x01(\v2\x14.amqp.NewsSetMessageR\x0enewsSetMessage\x12I\n" +
	"\x12newsTwitterMessage\x18\xdd\x04 \x01(\v2\x18.amqp.NewsTwitterMessageR\x12newsTwitterMessage\x12R\n" +
	"\x15portalPositionRequest\x18\xbc\x05 \x01(\v2\x1b.amqp.PortalPositionRequestR\x15portalPositionRequest\x12O\n" +
	"\x14portalPositionAnswer\x18\xbd\x05 \x01(\v2\x1a.amqp.PortalPositionAnswerR\x14portalPositionAnswer\"\xb0\t\n" +
	"\x04Type\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\x11\n" +
	"\rABOUT_REQUEST\x10d\x12\x1b\n" +
	"\x16ALIGN_GET_BOOK_REQUEST\x10\xc8\x01\x12\x1a\n" +
	"\x15ALIGN_GET_BOOK_ANSWER\x10\xc9\x01\x12\x1b\n" +
	"\x16ALIGN_GET_USER_REQUEST\x10\xca\x01\x12\x1a\n" +
	"\x15ALIGN_GET_USER_ANSWER\x10\xcb\x01\x12\x16\n" +
	"\x11ALIGN_SET_REQUEST\x10\xcc\x01\x12\x15\n" +
	"\x10ALIGN_SET_ANSWER\x10\xcd\x01\x12\x1c\n" +
	"\x17COMPETITION_MAP_REQUEST\x10\xac\x02\x12\x1b\n" +
	"\x16COMPETITION_MAP_ANSWER\x10\xad\x02\x12\x1e\n" +
	"\x19CONFIGURATION_GET_REQUEST\x10\x90\x03\x12\x1d\n" +
	"\x18CONFIGURATION_GET_ANSWER\x10\x91\x03\x12%\n" +
	" CONFIGURATION_SET_SERVER_REQUEST\x10\x92\x03\x12&\n" +
	"!CONFIGURATION_SET_ALMANAX_REQUEST\x10\x93\x03\x12\"\n" +
	"\x1dCONFIGURATION_SET_RSS_REQUEST\x10\x94\x03\x12&\n" +
	"!CONFIGURATION_SET_TWITTER_REQUEST\x10\x95\x03\x12\x1d\n" +
	"\x18CONFIGURATION_SET_ANSWER\x10\xc2\x03\x12!\n" +
	"\x1cENCYCLOPEDIA_ALMANAX_REQUEST\x10\xf4\x03\x12 \n" +
	"\x1bENCYCLOPEDIA_ALMANAX_ANSWER\x10\xf5\x03\x12*\n" +
	"%ENCYCLOPEDIA_ALMANAX_RESOURCE_REQUEST\x10\xf6\x03\x12)\n" +
	"$ENCYCLOPEDIA_ALMANAX_RESOURCE_ANSWER\x10\xf7\x03\x12(\n" +
	"#ENCYCLOPEDIA_ALMANAX_EFFECT_REQUEST\x10\xf8\x03\x12'\n" +
	"\"ENCYCLOPEDIA_ALMANAX_EFFECT_ANSWER\x10\xf9\x03\x12\x1e\n" +
	"\x19ENCYCLOPEDIA_LIST_REQUEST\x10\xfa\x03\x12\x1d\n" +
	"\x18ENCYCLOPEDIA_LIST_ANSWER\x10\xfb\x03\x12\x1e\n" +
	"\x19ENCYCLOPEDIA_ITEM_REQUEST\x10\xfc\x03\x12\x1d\n" +
	"\x18ENCYCLOPEDIA_ITEM_ANSWER\x10\xfd\x03\x12\x11\n" +
	"\fHELP_REQUEST\x10\xd8\x04\x12\x19\n" +
	"\x14JOB_GET_BOOK_REQUEST\x10\xbc\x05\x12\x18\n" +
	"\x13JOB_GET_BOOK_ANSWER\x10\xbd\x05\x12\x19\n" +
	"\x14JOB_GET_USER_REQUEST\x10\xbe\x05\x12\x18\n" +
	"\x13JOB_GET_USER_ANSWER\x10\xbf\x05\x12\x14\n" +
	"\x0fJOB_SET_REQUEST\x10\xc0\x05\x12\x13\n" +
	"\x0eJOB_SET_ANSWER\x10\xc1\x05\x12\x11\n" +
	"\fNEWS_ALMANAX\x10\xa0\x06\x12\x0e\n" +
	"\tNEWS_GAME\x10\xa1\x06\x12\x0f\n" +
	"\n" +
	"NEWS_GUILD\x10\xa2\x06\x12\r\n" +
	"\bNEWS_RSS\x10\xa3\x06\x12\r\n" +
	"\bNEWS_SET\x10\xa4\x06\x12\x11\n" +
	"\fNEWS_TWITTER\x10\xa5\x06\x12\x1c\n" +
	"\x17PORTAL_POSITION_REQUEST\x10\x84\a\x12\x1b\n" +
	"\x16PORTAL_POSITION_ANSWER\x10\x85\a\"!\n" +
	"\x06Status\x12\v\n" +
	"\aSUCCESS\x10\x00\x12\n" +
	"\n" +
	"\x06FAILED\x10\x01\"\xc4\x02\n" +
	"\aAlmanax\x12\x14\n" +
	"\x05bonus\x18\x01 \x01(\tR\x05bonus\x12/\n" +
	"\atribute\x18\x02 \x01(\v2\x15.amqp.Almanax.TributeR\atribute\x12\x16\n" +
	"\x06reward\x18\x03 \x01(\x03R\x06reward\x12.\n" +
	"\x04date\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x04date\x1a\xa9\x01\n" +
	"\aTribute\x12.\n" +
	"\x04item\x18\x01 \x01(\v2\x1a.amqp.Almanax.Tribute.ItemR\x04item\x12\x1a\n" +
	"\bquantity\x18\x02 \x01(\x03R\bquantity\x1aR\n" +
	"\x04Item\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04icon\x18\x02 \x01(\tR\x04icon\x12\"\n" +
	"\x04type\x18\x03 \x01(\x0e2\x0e.amqp.ItemTypeR\x04type\"B\n" +
	"\x06Source\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04icon\x18\x02 \x01(\tR\x04icon\x12\x10\n" +
	"\x03url\x18\x03 \x01(\tR\x03url\"\xa9\x01\n" +
	"\x13AlignGetBookRequest\x12\x18\n" +
	"\auserIds\x18\x01 \x03(\tR\auserIds\x12\x16\n" +
	"\x06cityId\x18\x02 \x01(\tR\x06cityId\x12\x18\n" +
	"\aorderId\x18\x03 \x01(\tR\aorderId\x12\x1a\n" +
	"\bserverId\x18\x04 \x01(\tR\bserverId\x12\x16\n" +
	"\x06offset\x18\x05 \x01(\x03R\x06offset\x12\x12\n" +
	"\x04size\x18\x06 \x01(\x03R\x04size\"\xcf\x02\n" +
	"\x12AlignGetBookAnswer\x12\x16\n" +
	"\x06cityId\x18\x01 \x01(\tR\x06cityId\x12\x18\n" +
	"\aorderId\x18\x02 \x01(\tR\aorderId\x12\x1a\n" +
	"\bserverId\x18\x03 \x01(\tR\bserverId\x12\x12\n" +
	"\x04page\x18\x04 \x01(\x03R\x04page\x12\x14\n" +
	"\x05pages\x18\x05 \x01(\x03R\x05pages\x12\x14\n" +
	"\x05total\x18\x06 \x01(\x03R\x05total\x12?\n" +
	"\tbelievers\x18\a \x03(\v2!.amqp.AlignGetBookAnswer.BelieverR\tbelievers\x1aj\n" +
	"\bBeliever\x12\x16\n" +
	"\x06cityId\x18\x01 \x01(\tR\x06cityId\x12\x18\n" +
	"\aorderId\x18\x02 \x01(\tR\aorderId\x12\x16\n" +
	"\x06userId\x18\x03 \x01(\tR\x06userId\x12\x14\n" +
	"\x05level\x18\x04 \x01(\x03R\x05level\"I\n" +
	"\x13AlignGetUserRequest\x12\x16\n" +
	"\x06userId\x18\x01 \x01(\tR\x06userId\x12\x1a\n" +
	"\bserverId\x18\x02 \x01(\tR\bserverId\"\xcf\x01\n" +
	"\x12AlignGetUserAnswer\x12\x1a\n" +
	"\bserverId\x18\x01 \x01(\tR\bserverId\x12B\n" +
	"\abeliefs\x18\x02 \x03(\v2(.amqp.AlignGetUserAnswer.AlignExperienceR\abeliefs\x1aY\n" +
	"\x0fAlignExperience\x12\x16\n" +
	"\x06cityId\x18\x01 \x01(\tR\x06cityId\x12\x18\n" +
	"\aorderId\x18\x02 \x01(\tR\aorderId\x12\x14\n" +
	"\x05level\x18\x03 \x01(\x03R\x05level\"\x8d\x01\n" +
	"\x0fAlignSetRequest\x12\x16\n" +
	"\x06userId\x18\x01 \x01(\tR\x06userId\x12\x16\n" +
	"\x06cityId\x18\x02 \x01(\tR\x06cityId\x12\x18\n" +
	"\aorderId\x18\x03 \x01(\tR\aorderId\x12\x1a\n" +
	"\bserverId\x18\x04 \x01(\tR\bserverId\x12\x14\n" +
	"\x05level\x18\x05 \x01(\x03R\x05level\"\x10\n" +
	"\x0eAlignSetAnswer\"5\n" +
	"\x15CompetitionMapRequest\x12\x1c\n" +
	"\tmapNumber\x18\x01 \x01(\x03R\tmapNumber\"\xa6\x01\n" +
	"\x14CompetitionMapAnswer\x12\x1c\n" +
	"\tmapNumber\x18\x01 \x01(\x03R\tmapNumber\x12\"\n" +
	"\fmapNormalURL\x18\x02 \x01(\tR\fmapNormalURL\x12&\n" +
	"\x0emapTacticalURL\x18\x03 \x01(\tR\x0emapTacticalURL\x12$\n" +
	"\x06source\x18\x04 \x01(\v2\f.amqp.SourceR\x06source\"3\n" +
	"\x17ConfigurationGetRequest\x12\x18\n" +
	"\aguildId\x18\x01 \x01(\tR\aguildId\"\xa8\x04\n" +
	"\x16ConfigurationGetAnswer\x12\x18\n" +
	"\aguildId\x18\x01 \x01(\tR\aguildId\x12\x1a\n" +
	"\bserverId\x18\x02 \x01(\tR\bserverId\x12R\n" +
	"\x0eserverChannels\x18\x03 \x03(\v2*.amqp.ConfigurationGetAnswer.ServerChannelR\x0eserverChannels\x12X\n" +
	"\x10notifiedChannels\x18\x04 \x03(\v2,.amqp.ConfigurationGetAnswer.NotifiedChannelR\x10notifiedChannels\x1aI\n" +
	"\rServerChannel\x12\x1c\n" +
	"\tchannelId\x18\x01 \x01(\tR\tchannelId\x12\x1a\n" +
	"\bserverId\x18\x02 \x01(\tR\bserverId\x1a\xde\x01\n" +
	"\x0fNotifiedChannel\x12\x1c\n" +
	"\tchannelId\x18\x01 \x01(\tR\tchannelId\x12i\n" +
	"\x10notificationType\x18\x02 \x01(\x0e2=.amqp.ConfigurationGetAnswer.NotifiedChannel.NotificationTypeR\x10notificationType\"B\n" +
	"\x10NotificationType\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\v\n" +
	"\aALMANAX\x10\x01\x12\a\n" +
	"\x03RSS\x10\x02\x12\v\n" +
	"\aTWITTER\x10\x03\"s\n" +
	"\x1dConfigurationSetServerRequest\x12\x18\n" +
	"\aguildId\x18\x01 \x01(\tR\aguildId\x12\x1c\n" +
	"\tchannelId\x18\x02 \x01(\tR\tchannelId\x12\x1a\n" +
	"\bserverId\x18\x03 \x01(\tR\bserverId\"r\n" +
	"\x1eConfigurationSetAlmanaxRequest\x12\x18\n" +
	"\aguildId\x18\x01 \x01(\tR\aguildId\x12\x1c\n" +
	"\tchannelId\x18\x02 \x01(\tR\tchannelId\x12\x18\n" +
	"\aenabled\x18\x03 \x01(\bR\aenabled\"\x86\x01\n" +
	"\x1aConfigurationSetRssRequest\x12\x18\n" +
	"\aguildId\x18\x01 \x01(\tR\aguildId\x12\x1c\n" +
	"\tchannelId\x18\x02 \x01(\tR\tchannelId\x12\x16\n" +
	"\x06feedId\x18\x03 \x01(\tR\x06feedId\x12\x18\n" +
	"\aenabled\x18. \x01(\bR\aenabled\"\x90\x01\n" +
	"\x1eConfigurationSetTwitterRequest\x12\x18\n" +
	"\aguildId\x18\x01 \x01(\tR\aguildId\x12\x1c\n" +
	"\tchannelId\x18\x02 \x01(\tR\tchannelId\x12\x1c\n" +
	"\ttwitterId\x18\x03 \x01(\tR\ttwitterId\x12\x18\n" +
	"\aenabled\x18\x04 \x01(\bR\aenabled\"h\n" +
	"\x16ConfigurationSetAnswer\x12$\n" +
	"\rnewsChannelId\x18\x01 \x01(\tR\rnewsChannelId\x12(\n" +
	"\x0ftargetChannelId\x18\x02 \x01(\tR\x0ftargetChannelId\"L\n" +
	"\x1aEncyclopediaAlmanaxRequest\x12.\n" +
	"\x04date\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x04date\"j\n" +
	"\x19EncyclopediaAlmanaxAnswer\x12'\n" +
	"\aalmanax\x18\x01 \x01(\v2\r.amqp.AlmanaxR\aalmanax\x12$\n" +
	"\x06source\x18\x02 \x01(\v2\f.amqp.SourceR\x06source\"\x80\x02\n" +
	" EncyclopediaAlmanaxEffectRequest\x12\x14\n" +
	"\x05query\x18\x01 \x01(\tR\x05query\x12.\n" +
	"\x04date\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x04date\x12F\n" +
	"\x04type\x18\x03 \x01(\x0e22.amqp.EncyclopediaAlmanaxEffectRequest.RequestTypeR\x04type\x12\x16\n" +
	"\x06offset\x18\x04 \x01(\x03R\x06offset\x12\x12\n" +
	"\x04size\x18\x05 \x01(\x03R\x04size\"\"\n" +
	"\vRequestType\x12\t\n" +
	"\x05QUERY\x10\x00\x12\b\n" +
	"\x04DATE\x10\x01\"\xca\x01\n" +
	"\x1fEncyclopediaAlmanaxEffectAnswer\x12\x14\n" +
	"\x05query\x18\x01 \x01(\tR\x05query\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x03R\x04page\x12\x14\n" +
	"\x05pages\x18\x03 \x01(\x03R\x05pages\x12\x14\n" +
	"\x05total\x18\x04 \x01(\x03R\x05total\x12+\n" +
	"\talmanaxes\x18\x05 \x03(\v2\r.amqp.AlmanaxR\talmanaxes\x12$\n" +
	"\x06source\x18\x06 \x01(\v2\f.amqp.SourceR\x06source\"@\n" +
	"\"EncyclopediaAlmanaxResourceRequest\x12\x1a\n" +
	"\bduration\x18\x01 \x01(\x03R\bduration\"\xa1\x02\n" +
	"!EncyclopediaAlmanaxResourceAnswer\x12K\n" +
	"\btributes\x18\x01 \x03(\v2/.amqp.EncyclopediaAlmanaxResourceAnswer.TributeR\btributes\x12\x1a\n" +
	"\bduration\x18\x02 \x01(\x03R\bduration\x12$\n" +
	"\x06source\x18\x03 \x01(\v2\f.amqp.SourceR\x06source\x1am\n" +
	"\aTribute\x12\x1a\n" +
	"\bitemName\x18\x01 \x01(\tR\bitemName\x12*\n" +
	"\bitemType\x18\x02 \x01(\x0e2\x0e.amqp.ItemTypeR\bitemType\x12\x1a\n" +
	"\bquantity\x18\x03 \x01(\x03R\bquantity\"\xa3\x01\n" +
	"\x17EncyclopediaListRequest\x12\x14\n" +
	"\x05query\x18\x01 \x01(\tR\x05query\x126\n" +
	"\x04type\x18\x02 \x01(\x0e2\".amqp.EncyclopediaListRequest.TypeR\x04type\":\n" +
	"\x04Type\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\b\n" +
	"\x04ITEM\x10\x01\x12\a\n" +
	"\x03SET\x10\x02\x12\x12\n" +
	"\x0eALMANAX_EFFECT\x10\x03\"}\n" +
	"\x16EncyclopediaListAnswer\x127\n" +
	"\x05items\x18\x01 \x03(\v2!.amqp.EncyclopediaListAnswer.ItemR\x05items\x1a*\n" +
	"\x04Item\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"g\n" +
	"\x17EncyclopediaItemRequest\x12\x14\n" +
	"\x05query\x18\x01 \x01(\tR\x05query\x12\x12\n" +
	"\x04isID\x18\x02 \x01(\bR\x04isID\x12\"\n" +
	"\x04type\x18\x03 \x01(\x0e2\x0e.amqp.ItemTypeR\x04type\"\xcf\x13\n" +
	"\x16EncyclopediaItemAnswer\x12\"\n" +
	"\x04type\x18\x01 \x01(\x0e2\x0e.amqp.ItemTypeR\x04type\x12D\n" +
	"\tequipment\x18\x02 \x01(\v2&.amqp.EncyclopediaItemAnswer.EquipmentR\tequipment\x122\n" +
	"\x03set\x18\x03 \x01(\v2 .amqp.EncyclopediaItemAnswer.SetR\x03set\x12$\n" +
	"\x06source\x18\x04 \x01(\v2\f.amqp.SourceR\x06source\x1a\xb7\b\n" +
	"\tEquipment\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12?\n" +
	"\x04type\x18\x04 \x01(\v2+.amqp.EncyclopediaItemAnswer.Equipment.TypeR\x04type\x12\x12\n" +
	"\x04icon\x18\x05 \x01(\tR\x04icon\x12\x14\n" +
	"\x05level\x18\x06 \x01(\x03R\x05level\x12\x12\n" +
	"\x04pods\x18\a \x01(\x03R\x04pods\x12B\n" +
	"\x03set\x18\b \x01(\v20.amqp.EncyclopediaItemAnswer.Equipment.SetFamilyR\x03set\x12`\n" +
	"\x0fcharacteristics\x18\t \x01(\v26.amqp.EncyclopediaItemAnswer.Equipment.CharacteristicsR\x0fcharacteristics\x12I\n" +
	"\rweaponEffects\x18\n" +
	" \x03(\v2#.amqp.EncyclopediaItemAnswer.EffectR\rweaponEffects\x12=\n" +
	"\aeffects\x18\v \x03(\v2#.amqp.EncyclopediaItemAnswer.EffectR\aeffects\x12G\n" +
	"\n" +
	"conditions\x18\f \x01(\v2'.amqp.EncyclopediaItemAnswer.ConditionsR\n" +
	"conditions\x12;\n" +
	"\x06recipe\x18\r \x01(\v2#.amqp.EncyclopediaItemAnswer.RecipeR\x06recipe\x1a\xe5\x01\n" +
	"\x0fCharacteristics\x12\x12\n" +
	"\x04cost\x18\x01 \x01(\x03R\x04cost\x12\x1a\n" +
	"\bminRange\x18\x02 \x01(\x03R\bminRange\x12\x1a\n" +
	"\bmaxRange\x18\x03 \x01(\x03R\bmaxRange\x12&\n" +
	"\x0emaxCastPerTurn\x18\x04 \x01(\x03R\x0emaxCastPerTurn\x12\"\n" +
	"\fcriticalRate\x18\x05 \x01(\x03R\fcriticalRate\x12$\n" +
	"\rcriticalBonus\x18\x06 \x01(\x03R\rcriticalBonus\x12\x14\n" +
	"\x05areas\x18\a \x03(\tR\x05areas\x1a\x95\x01\n" +
	"\x04Type\x12*\n" +
	"\bitemType\x18\x01 \x01(\x0e2\x0e.amqp.ItemTypeR\bitemType\x129\n" +
	"\requipmentType\x18\x02 \x01(\x0e2\x13.amqp.EquipmentTypeR\requipmentType\x12&\n" +
	"\x0eequipmentLabel\x18\x03 \x01(\tR\x0eequipmentLabel\x1a/\n" +
	"\tSetFamily\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x1a\xd9\x03\n" +
	"\x03Set\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x12\n" +
	"\x04icon\x18\x03 \x01(\tR\x04icon\x12\x14\n" +
	"\x05level\x18\x04 \x01(\x03R\x05level\x12\x1e\n" +
	"\n" +
	"isCosmetic\x18\x05 \x01(\bR\n" +
	"isCosmetic\x12J\n" +
	"\n" +
	"equipments\x18\x06 \x03(\v2*.amqp.EncyclopediaItemAnswer.Set.EquipmentR\n" +
	"equipments\x12@\n" +
	"\abonuses\x18\a \x03(\v2&.amqp.EncyclopediaItemAnswer.Set.BonusR\abonuses\x1an\n" +
	"\tEquipment\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12'\n" +
	"\x04type\x18\x03 \x01(\x0e2\x13.amqp.EquipmentTypeR\x04type\x12\x14\n" +
	"\x05level\x18\x04 \x01(\x03R\x05level\x1af\n" +
	"\x05Bonus\x12\x1e\n" +
	"\n" +
	"itemNumber\x18\x01 \x01(\x03R\n" +
	"itemNumber\x12=\n" +
	"\aeffects\x18\x02 \x03(\v2#.amqp.EncyclopediaItemAnswer.EffectR\aeffects\x1a.\n" +
	"\x06Effect\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05label\x18\x02 \x01(\tR\x05label\x1a\xdb\x03\n" +
	"\n" +
	"Conditions\x12L\n" +
	"\brelation\x18\x01 \x01(\x0e20.amqp.EncyclopediaItemAnswer.Conditions.RelationR\brelation\x12C\n" +
	"\bchildren\x18\x02 \x03(\v2'.amqp.EncyclopediaItemAnswer.ConditionsR\bchildren\x12O\n" +
	"\tcondition\x18\x03 \x01(\v21.amqp.EncyclopediaItemAnswer.Conditions.ConditionR\tcondition\x1a\xc1\x01\n" +
	"\tCondition\x12\x1a\n" +
	"\boperator\x18\x01 \x01(\tR\boperator\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value\x12S\n" +
	"\aelement\x18\x03 \x01(\v29.amqp.EncyclopediaItemAnswer.Conditions.Condition.ElementR\aelement\x1a-\n" +
	"\aElement\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\"%\n" +
	"\bRelation\x12\b\n" +
	"\x04NONE\x10\x00\x12\a\n" +
	"\x03AND\x10\x01\x12\x06\n" +
	"\x02OR\x10\x02\x1a\xcc\x01\n" +
	"\x06Recipe\x12P\n" +
	"\vingredients\x18\x01 \x03(\v2..amqp.EncyclopediaItemAnswer.Recipe.IngredientR\vingredients\x1ap\n" +
	"\n" +
	"Ingredient\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1a\n" +
	"\bquantity\x18\x03 \x01(\x03R\bquantity\x12\"\n" +
	"\x04type\x18\x04 \x01(\x0e2\x0e.amqp.ItemTypeR\x04type\"\x8b\x01\n" +
	"\x11JobGetBookRequest\x12\x18\n" +
	"\auserIds\x18\x01 \x03(\tR\auserIds\x12\x14\n" +
	"\x05jobId\x18\x02 \x01(\tR\x05jobId\x12\x1a\n" +
	"\bserverId\x18\x03 \x01(\tR\bserverId\x12\x16\n" +
	"\x06offset\x18\x04 \x01(\x03R\x06offset\x12\x12\n" +
	"\x04size\x18\x05 \x01(\x03R\x04size\"\xff\x01\n" +
	"\x10JobGetBookAnswer\x12\x14\n" +
	"\x05jobId\x18\x01 \x01(\tR\x05jobId\x12\x1a\n" +
	"\bserverId\x18\x02 \x01(\tR\bserverId\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x03R\x04page\x12\x14\n" +
	"\x05pages\x18\x04 \x01(\x03R\x05pages\x12\x14\n" +
	"\x05total\x18\x05 \x01(\x03R\x05total\x12>\n" +
	"\tcraftsmen\x18\x06 \x03(\v2 .amqp.JobGetBookAnswer.CraftsmanR\tcraftsmen\x1a9\n" +
	"\tCraftsman\x12\x16\n" +
	"\x06userId\x18\x01 \x01(\tR\x06userId\x12\x14\n" +
	"\x05level\x18\x02 \x01(\x03R\x05level\"G\n" +
	"\x11JobGetUserRequest\x12\x16\n" +
	"\x06userId\x18\x01 \x01(\tR\x06userId\x12\x1a\n" +
	"\bserverId\x18\x02 \x01(\tR\bserverId\"\xa5\x01\n" +
	"\x10JobGetUserAnswer\x12\x1a\n" +
	"\bserverId\x18\x01 \x01(\tR\bserverId\x128\n" +
	"\x04jobs\x18\x02 \x03(\v2$.amqp.JobGetUserAnswer.JobExperienceR\x04jobs\x1a;\n" +
	"\rJobExperience\x12\x14\n" +
	"\x05jobId\x18\x01 \x01(\tR\x05jobId\x12\x14\n" +
	"\x05level\x18\x02 \x01(\x03R\x05level\"o\n" +
	"\rJobSetRequest\x12\x16\n" +
	"\x06userId\x18\x01 \x01(\tR\x06userId\x12\x14\n" +
	"\x05jobId\x18\x02 \x01(\tR\x05jobId\x12\x1a\n" +
	"\bserverId\x18\x03 \x01(\tR\bserverId\x12\x14\n" +
	"\x05level\x18\x04 \x01(\x03R\x05level\"\x0e\n" +
	"\fJobSetAnswer\"\xde\x01\n" +
	"\x12NewsAlmanaxMessage\x12B\n" +
	"\talmanaxes\x18\x01 \x03(\v2$.amqp.NewsAlmanaxMessage.I18nAlmanaxR\talmanaxes\x12$\n" +
	"\x06source\x18\x02 \x01(\v2\f.amqp.SourceR\x06source\x1a^\n" +
	"\vI18nAlmanax\x12'\n" +
	"\aalmanax\x18\x01 \x01(\v2\r.amqp.AlmanaxR\aalmanax\x12&\n" +
	"\x06locale\x18\x02 \x01(\x0e2\x0e.amqp.LanguageR\x06locale\"\xc8\x01\n" +
	"\x12NewsTwitterMessage\x12\x1c\n" +
	"\ttwitterId\x18\x01 \x01(\tR\ttwitterId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x10\n" +
	"\x03url\x18\x04 \x01(\tR\x03url\x12\x1a\n" +
	"\biconUrls\x18\x05 \x03(\tR\biconUrls\x12.\n" +
	"\x04date\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\x04date\"\xd8\x01\n" +
	"\x0eNewsRSSMessage\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x1e\n" +
	"\n" +
	"authorName\x18\x03 \x01(\tR\n" +
	"authorName\x12\x10\n" +
	"\x03url\x18\x04 \x01(\tR\x03url\x12\x18\n" +
	"\aiconUrl\x18\x05 \x01(\tR\aiconUrl\x12.\n" +
	"\x04date\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\x04date\x12\x12\n" +
	"\x04type\x18\a \x01(\tR\x04type\"+\n" +
	"\x0fNewsGameMessage\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\"\xba\x01\n" +
	"\x10NewsGuildMessage\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vmemberCount\x18\x03 \x01(\x03R\vmemberCount\x122\n" +
	"\x05event\x18\x04 \x01(\x0e2\x1c.amqp.NewsGuildMessage.EventR\x05event\",\n" +
	"\x05Event\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\n" +
	"\n" +
	"\x06CREATE\x10\x01\x12\n" +
	"\n" +
	"\x06DELETE\x10\x02\"(\n" +
	"\x0eNewsSetMessage\x12\x16\n" +
	"\x06setIds\x18\x01 \x03(\tR\x06setIds\"U\n" +
	"\x15PortalPositionRequest\x12\x1a\n" +
	"\bserverId\x18\x01 \x01(\tR\bserverId\x12 \n" +
	"\vdimensionId\x18\x02 \x01(\tR\vdimensionId\"\x8a\a\n" +
	"\x14PortalPositionAnswer\x12G\n" +
	"\tpositions\x18\x01 \x03(\v2).amqp.PortalPositionAnswer.PortalPositionR\tpositions\x1a\xa8\x06\n" +
	"\x0ePortalPosition\x12\x1a\n" +
	"\bserverId\x18\x01 \x01(\tR\bserverId\x12 \n" +
	"\vdimensionId\x18\x02 \x01(\tR\vdimensionId\x12$\n" +
	"\rremainingUses\x18\x03 \x01(\x03R\rremainingUses\x12N\n" +
	"\bposition\x18\x04 \x01(\v22.amqp.PortalPositionAnswer.PortalPosition.PositionR\bposition\x12\x1c\n" +
	"\tcreatedBy\x18\x05 \x01(\tR\tcreatedBy\x12\x1c\n" +
	"\tupdatedBy\x18\x06 \x01(\tR\tupdatedBy\x128\n" +
	"\tcreatedAt\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x128\n" +
	"\tupdatedAt\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12$\n" +
	"\x06source\x18\t \x01(\v2\f.amqp.SourceR\x06source\x1a\x8b\x03\n" +
	"\bPosition\x12\f\n" +
	"\x01x\x18\x01 \x01(\x03R\x01x\x12\f\n" +
	"\x01y\x18\x02 \x01(\x03R\x01y\x12\x1e\n" +
	"\n" +
	"isInCanopy\x18\x03 \x01(\bR\n" +
	"isInCanopy\x12Z\n" +
	"\ttransport\x18\x04 \x01(\v2<.amqp.PortalPositionAnswer.PortalPosition.Position.TransportR\ttransport\x12p\n" +
	"\x14conditionalTransport\x18\x05 \x01(\v2<.amqp.PortalPositionAnswer.PortalPosition.Position.TransportR\x14conditionalTransport\x1au\n" +
	"\tTransport\x12\x16\n" +
	"\x06areaId\x18\x01 \x01(\tR\x06areaId\x12\x1c\n" +
	"\tsubAreaId\x18\x02 \x01(\tR\tsubAreaId\x12\x16\n" +
	"\x06typeId\x18\x03 \x01(\tR\x06typeId\x12\f\n" +
	"\x01x\x18\x04 \x01(\x03R\x01x\x12\f\n" +
	"\x01y\x18\x05 \x01(\x03R\x01y*F\n" +
	"\x04Game\x12\f\n" +
	"\bANY_GAME\x10\x00\x12\x0e\n" +
	"\n" +
	"DOFUS_GAME\x10\x01\x12\x0f\n" +
	"\vDOFUS_TOUCH\x10\x02\x12\x0f\n" +
	"\vDOFUS_RETRO\x10\x03*;\n" +
	"\bLanguage\x12\a\n" +
	"\x03ANY\x10\x00\x12\x06\n" +
	"\x02FR\x10\x01\x12\x06\n" +
	"\x02EN\x10\x02\x12\x06\n" +
	"\x02ES\x10\x03\x12\x06\n" +
	"\x02DE\x10\x04\x12\x06\n" +
	"\x02PT\x10\x05*\xa5\x03\n" +
	"\rEquipmentType\x12\b\n" +
	"\x04NONE\x10\x00\x12\n" +
	"\n" +
	"\x06AMULET\x10\x01\x12\a\n" +
	"\x03AXE\x10\x02\x12\b\n" +
	"\x04BELT\x10\x03\x12\b\n" +
	"\x04BOOT\x10\x04\x12\a\n" +
	"\x03BOW\x10\x05\x12\t\n" +
	"\x05CLOAK\x10\x06\x12\n" +
	"\n" +
	"\x06DAGGER\x10\a\x12\t\n" +
	"\x05DOFUS\x10\b\x12\x0f\n" +
	"\vDRAGOTURKEY\x10\t\x12\n" +
	"\n" +
	"\x06HAMMER\x10\n" +
	"\x12\a\n" +
	"\x03HAT\x10\v\x12\t\n" +
	"\x05LANCE\x10\f\x12\a\n" +
	"\x03PET\x10\r\x12\r\n" +
	"\tPETSMOUNT\x10\x0e\x12\v\n" +
	"\aPICKAXE\x10\x0f\x12\x10\n" +
	"\fPRYSMARADITE\x10\x10\x12\r\n" +
	"\tRHINEETLE\x10\x11\x12\b\n" +
	"\x04RING\x10\x12\x12\n" +
	"\n" +
	"\x06SCYTHE\x10\x13\x12\f\n" +
	"\bSEEMYOOL\x10\x14\x12\n" +
	"\n" +
	"\x06SHIELD\x10\x15\x12\n" +
	"\n" +
	"\x06SHOVEL\x10\x16\x12\t\n" +
	"\x05STAFF\x10\x17\x12\t\n" +
	"\x05SWORD\x10\x18\x12\b\n" +
	"\x04TOOL\x10\x19\x12\n" +
	"\n" +
	"\x06TROPHY\x10\x1a\x12\b\n" +
	"\x04WAND\x10\x1b\x12\v\n" +
	"\aCOSTUME\x10\x1c\x12\x11\n" +
	"\rLIVING_OBJECT\x10\x1d\x12\x11\n" +
	"\rMISC_COSMETIC\x10\x1e\x12\x10\n" +
	"\fSHOULDER_PAD\x10\x1f\x12\b\n" +
	"\x04WING\x10 *\x9f\x01\n" +
	"\bItemType\x12\x11\n" +
	"\rANY_ITEM_TYPE\x10\x00\x12\x13\n" +
	"\x0fCONSUMABLE_TYPE\x10\x01\x12\x11\n" +
	"\rCOSMETIC_TYPE\x10\x02\x12\x12\n" +
	"\x0eEQUIPMENT_TYPE\x10\x03\x12\x0e\n" +
	"\n" +
	"MOUNT_TYPE\x10\x04\x12\x13\n" +
	"\x0fQUEST_ITEM_TYPE\x10\x05\x12\x11\n" +
	"\rRESOURCE_TYPE\x10\x06\x12\f\n" +
	"\bSET_TYPE\x10\aB\bZ\x06.;amqpb\x06proto3"

var (
	file_rabbitmq_proto_rawDescOnce sync.Once
	file_rabbitmq_proto_rawDescData []byte
)

func file_rabbitmq_proto_rawDescGZIP() []byte {
	file_rabbitmq_proto_rawDescOnce.Do(func() {
		file_rabbitmq_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_rabbitmq_proto_rawDesc), len(file_rabbitmq_proto_rawDesc)))
	})
	return file_rabbitmq_proto_rawDescData
}

var file_rabbitmq_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_rabbitmq_proto_msgTypes = make([]protoimpl.MessageInfo, 69)
var file_rabbitmq_proto_goTypes = []any{
	(Game)(0),                   // 0: amqp.Game
	(Language)(0),               // 1: amqp.Language
	(EquipmentType)(0),          // 2: amqp.EquipmentType
	(ItemType)(0),               // 3: amqp.ItemType
	(RabbitMQMessage_Type)(0),   // 4: amqp.RabbitMQMessage.Type
	(RabbitMQMessage_Status)(0), // 5: amqp.RabbitMQMessage.Status
	(ConfigurationGetAnswer_NotifiedChannel_NotificationType)(0),   // 6: amqp.ConfigurationGetAnswer.NotifiedChannel.NotificationType
	(EncyclopediaAlmanaxEffectRequest_RequestType)(0),              // 7: amqp.EncyclopediaAlmanaxEffectRequest.RequestType
	(EncyclopediaListRequest_Type)(0),                              // 8: amqp.EncyclopediaListRequest.Type
	(EncyclopediaItemAnswer_Conditions_Relation)(0),                // 9: amqp.EncyclopediaItemAnswer.Conditions.Relation
	(NewsGuildMessage_Event)(0),                                    // 10: amqp.NewsGuildMessage.Event
	(*RabbitMQMessage)(nil),                                        // 11: amqp.RabbitMQMessage
	(*Almanax)(nil),                                                // 12: amqp.Almanax
	(*Source)(nil),                                                 // 13: amqp.Source
	(*AlignGetBookRequest)(nil),                                    // 14: amqp.AlignGetBookRequest
	(*AlignGetBookAnswer)(nil),                                     // 15: amqp.AlignGetBookAnswer
	(*AlignGetUserRequest)(nil),                                    // 16: amqp.AlignGetUserRequest
	(*AlignGetUserAnswer)(nil),                                     // 17: amqp.AlignGetUserAnswer
	(*AlignSetRequest)(nil),                                        // 18: amqp.AlignSetRequest
	(*AlignSetAnswer)(nil),                                         // 19: amqp.AlignSetAnswer
	(*CompetitionMapRequest)(nil),                                  // 20: amqp.CompetitionMapRequest
	(*CompetitionMapAnswer)(nil),                                   // 21: amqp.CompetitionMapAnswer
	(*ConfigurationGetRequest)(nil),                                // 22: amqp.ConfigurationGetRequest
	(*ConfigurationGetAnswer)(nil),                                 // 23: amqp.ConfigurationGetAnswer
	(*ConfigurationSetServerRequest)(nil),                          // 24: amqp.ConfigurationSetServerRequest
	(*ConfigurationSetAlmanaxRequest)(nil),                         // 25: amqp.ConfigurationSetAlmanaxRequest
	(*ConfigurationSetRssRequest)(nil),                             // 26: amqp.ConfigurationSetRssRequest
	(*ConfigurationSetTwitterRequest)(nil),                         // 27: amqp.ConfigurationSetTwitterRequest
	(*ConfigurationSetAnswer)(nil),                                 // 28: amqp.ConfigurationSetAnswer
	(*EncyclopediaAlmanaxRequest)(nil),                             // 29: amqp.EncyclopediaAlmanaxRequest
	(*EncyclopediaAlmanaxAnswer)(nil),                              // 30: amqp.EncyclopediaAlmanaxAnswer
	(*EncyclopediaAlmanaxEffectRequest)(nil),                       // 31: amqp.EncyclopediaAlmanaxEffectRequest
	(*EncyclopediaAlmanaxEffectAnswer)(nil),                        // 32: amqp.EncyclopediaAlmanaxEffectAnswer
	(*EncyclopediaAlmanaxResourceRequest)(nil),                     // 33: amqp.EncyclopediaAlmanaxResourceRequest
	(*EncyclopediaAlmanaxResourceAnswer)(nil),                      // 34: amqp.EncyclopediaAlmanaxResourceAnswer
	(*EncyclopediaListRequest)(nil),                                // 35: amqp.EncyclopediaListRequest
	(*EncyclopediaListAnswer)(nil),                                 // 36: amqp.EncyclopediaListAnswer
	(*EncyclopediaItemRequest)(nil),                                // 37: amqp.EncyclopediaItemRequest
	(*EncyclopediaItemAnswer)(nil),                                 // 38: amqp.EncyclopediaItemAnswer
	(*JobGetBookRequest)(nil),                                      // 39: amqp.JobGetBookRequest
	(*JobGetBookAnswer)(nil),                                       // 40: amqp.JobGetBookAnswer
	(*JobGetUserRequest)(nil),                                      // 41: amqp.JobGetUserRequest
	(*JobGetUserAnswer)(nil),                                       // 42: amqp.JobGetUserAnswer
	(*JobSetRequest)(nil),                                          // 43: amqp.JobSetRequest
	(*JobSetAnswer)(nil),                                           // 44: amqp.JobSetAnswer
	(*NewsAlmanaxMessage)(nil),                                     // 45: amqp.NewsAlmanaxMessage
	(*NewsTwitterMessage)(nil),                                     // 46: amqp.NewsTwitterMessage
	(*NewsRSSMessage)(nil),                                         // 47: amqp.NewsRSSMessage
	(*NewsGameMessage)(nil),                                        // 48: amqp.NewsGameMessage
	(*NewsGuildMessage)(nil),                                       // 49: amqp.NewsGuildMessage
	(*NewsSetMessage)(nil),                                         // 50: amqp.NewsSetMessage
	(*PortalPositionRequest)(nil),                                  // 51: amqp.PortalPositionRequest
	(*PortalPositionAnswer)(nil),                                   // 52: amqp.PortalPositionAnswer
	(*Almanax_Tribute)(nil),                                        // 53: amqp.Almanax.Tribute
	(*Almanax_Tribute_Item)(nil),                                   // 54: amqp.Almanax.Tribute.Item
	(*AlignGetBookAnswer_Believer)(nil),                            // 55: amqp.AlignGetBookAnswer.Believer
	(*AlignGetUserAnswer_AlignExperience)(nil),                     // 56: amqp.AlignGetUserAnswer.AlignExperience
	(*ConfigurationGetAnswer_ServerChannel)(nil),                   // 57: amqp.ConfigurationGetAnswer.ServerChannel
	(*ConfigurationGetAnswer_NotifiedChannel)(nil),                 // 58: amqp.ConfigurationGetAnswer.NotifiedChannel
	(*EncyclopediaAlmanaxResourceAnswer_Tribute)(nil),              // 59: amqp.EncyclopediaAlmanaxResourceAnswer.Tribute
	(*EncyclopediaListAnswer_Item)(nil),                            // 60: amqp.EncyclopediaListAnswer.Item
	(*EncyclopediaItemAnswer_Equipment)(nil),                       // 61: amqp.EncyclopediaItemAnswer.Equipment
	(*EncyclopediaItemAnswer_Set)(nil),                             // 62: amqp.EncyclopediaItemAnswer.Set
	(*EncyclopediaItemAnswer_Effect)(nil),                          // 63: amqp.EncyclopediaItemAnswer.Effect
	(*EncyclopediaItemAnswer_Conditions)(nil),                      // 64: amqp.EncyclopediaItemAnswer.Conditions
	(*EncyclopediaItemAnswer_Recipe)(nil),                          // 65: amqp.EncyclopediaItemAnswer.Recipe
	(*EncyclopediaItemAnswer_Equipment_Characteristics)(nil),       // 66: amqp.EncyclopediaItemAnswer.Equipment.Characteristics
	(*EncyclopediaItemAnswer_Equipment_Type)(nil),                  // 67: amqp.EncyclopediaItemAnswer.Equipment.Type
	(*EncyclopediaItemAnswer_Equipment_SetFamily)(nil),             // 68: amqp.EncyclopediaItemAnswer.Equipment.SetFamily
	(*EncyclopediaItemAnswer_Set_Equipment)(nil),                   // 69: amqp.EncyclopediaItemAnswer.Set.Equipment
	(*EncyclopediaItemAnswer_Set_Bonus)(nil),                       // 70: amqp.EncyclopediaItemAnswer.Set.Bonus
	(*EncyclopediaItemAnswer_Conditions_Condition)(nil),            // 71: amqp.EncyclopediaItemAnswer.Conditions.Condition
	(*EncyclopediaItemAnswer_Conditions_Condition_Element)(nil),    // 72: amqp.EncyclopediaItemAnswer.Conditions.Condition.Element
	(*EncyclopediaItemAnswer_Recipe_Ingredient)(nil),               // 73: amqp.EncyclopediaItemAnswer.Recipe.Ingredient
	(*JobGetBookAnswer_Craftsman)(nil),                             // 74: amqp.JobGetBookAnswer.Craftsman
	(*JobGetUserAnswer_JobExperience)(nil),                         // 75: amqp.JobGetUserAnswer.JobExperience
	(*NewsAlmanaxMessage_I18NAlmanax)(nil),                         // 76: amqp.NewsAlmanaxMessage.I18nAlmanax
	(*PortalPositionAnswer_PortalPosition)(nil),                    // 77: amqp.PortalPositionAnswer.PortalPosition
	(*PortalPositionAnswer_PortalPosition_Position)(nil),           // 78: amqp.PortalPositionAnswer.PortalPosition.Position
	(*PortalPositionAnswer_PortalPosition_Position_Transport)(nil), // 79: amqp.PortalPositionAnswer.PortalPosition.Position.Transport
	(*timestamp.Timestamp)(nil),                                    // 80: google.protobuf.Timestamp
}
var file_rabbitmq_proto_depIdxs = []int32{
	4,   // 0: amqp.RabbitMQMessage.type:type_name -> amqp.RabbitMQMessage.Type
	1,   // 1: amqp.RabbitMQMessage.language:type_name -> amqp.Language
	5,   // 2: amqp.RabbitMQMessage.status:type_name -> amqp.RabbitMQMessage.Status
	0,   // 3: amqp.RabbitMQMessage.game:type_name -> amqp.Game
	14,  // 4: amqp.RabbitMQMessage.alignGetBookRequest:type_name -> amqp.AlignGetBookRequest
	15,  // 5: amqp.RabbitMQMessage.alignGetBookAnswer:type_name -> amqp.AlignGetBookAnswer
	16,  // 6: amqp.RabbitMQMessage.alignGetUserRequest:type_name -> amqp.AlignGetUserRequest
	17,  // 7: amqp.RabbitMQMessage.alignGetUserAnswer:type_name -> amqp.AlignGetUserAnswer
	18,  // 8: amqp.RabbitMQMessage.alignSetRequest:type_name -> amqp.AlignSetRequest
	19,  // 9: amqp.RabbitMQMessage.alignSetAnswer:type_name -> amqp.AlignSetAnswer
	20,  // 10: amqp.RabbitMQMessage.competitionMapRequest:type_name -> amqp.CompetitionMapRequest
	21,  // 11: amqp.RabbitMQMessage.competitionMapAnswer:type_name -> amqp.CompetitionMapAnswer
	22,  // 12: amqp.RabbitMQMessage.configurationGetRequest:type_name -> amqp.ConfigurationGetRequest
	23,  // 13: amqp.RabbitMQMessage.configurationGetAnswer:type_name -> amqp.ConfigurationGetAnswer
	24,  // 14: amqp.RabbitMQMessage.configurationSetServerRequest:type_name -> amqp.ConfigurationSetServerRequest
	25,  // 15: amqp.RabbitMQMessage.configurationSetAlmanaxRequest:type_name -> amqp.ConfigurationSetAlmanaxRequest
	26,  // 16: amqp.RabbitMQMessage.configurationSetRssRequest:type_name -> amqp.ConfigurationSetRssRequest
	27,  // 17: amqp.RabbitMQMessage.configurationSetTwitterRequest:type_name -> amqp.ConfigurationSetTwitterRequest
	28,  // 18: amqp.RabbitMQMessage.configurationSetAnswer:type_name -> amqp.ConfigurationSetAnswer
	29,  // 19: amqp.RabbitMQMessage.encyclopediaAlmanaxRequest:type_name -> amqp.EncyclopediaAlmanaxRequest
	30,  // 20: amqp.RabbitMQMessage.encyclopediaAlmanaxAnswer:type_name -> amqp.EncyclopediaAlmanaxAnswer
	33,  // 21: amqp.RabbitMQMessage.encyclopediaAlmanaxResourceRequest:type_name -> amqp.EncyclopediaAlmanaxResourceRequest
	34,  // 22: amqp.RabbitMQMessage.encyclopediaAlmanaxResourceAnswer:type_name -> amqp.EncyclopediaAlmanaxResourceAnswer
	31,  // 23: amqp.RabbitMQMessage.encyclopediaAlmanaxEffectRequest:type_name -> amqp.EncyclopediaAlmanaxEffectRequest
	32,  // 24: amqp.RabbitMQMessage.encyclopediaAlmanaxEffectAnswer:type_name -> amqp.EncyclopediaAlmanaxEffectAnswer
	35,  // 25: amqp.RabbitMQMessage.encyclopediaListRequest:type_name -> amqp.EncyclopediaListRequest
	36,  // 26: amqp.RabbitMQMessage.encyclopediaListAnswer:type_name -> amqp.EncyclopediaListAnswer
	37,  // 27: amqp.RabbitMQMessage.encyclopediaItemRequest:type_name -> amqp.EncyclopediaItemRequest
	38,  // 28: amqp.RabbitMQMessage.encyclopediaItemAnswer:type_name -> amqp.EncyclopediaItemAnswer
	39,  // 29: amqp.RabbitMQMessage.jobGetBookRequest:type_name -> amqp.JobGetBookRequest
	40,  // 30: amqp.RabbitMQMessage.jobGetBookAnswer:type_name -> amqp.JobGetBookAnswer
	41,  // 31: amqp.RabbitMQMessage.jobGetUserRequest:type_name -> amqp.JobGetUserRequest
	42,  // 32: amqp.RabbitMQMessage.jobGetUserAnswer:type_name -> amqp.JobGetUserAnswer
	43,  // 33: amqp.RabbitMQMessage.jobSetRequest:type_name -> amqp.JobSetRequest
	44,  // 34: amqp.RabbitMQMessage.jobSetAnswer:type_name -> amqp.JobSetAnswer
	45,  // 35: amqp.RabbitMQMessage.newsAlmanaxMessage:type_name -> amqp.NewsAlmanaxMessage
	48,  // 36: amqp.RabbitMQMessage.newsGameMessage:type_name -> amqp.NewsGameMessage
	49,  // 37: amqp.RabbitMQMessage.newsGuildMessage:type_name -> amqp.NewsGuildMessage
	47,  // 38: amqp.RabbitMQMessage.newsRSSMessage:type_name -> amqp.NewsRSSMessage
	50,  // 39: amqp.RabbitMQMessage.newsSetMessage:type_name -> amqp.NewsSetMessage
	46,  // 40: amqp.RabbitMQMessage.newsTwitterMessage:type_name -> amqp.NewsTwitterMessage
	51,  // 41: amqp.RabbitMQMessage.portalPositionRequest:type_name -> amqp.PortalPositionRequest
	52,  // 42: amqp.RabbitMQMessage.portalPositionAnswer:type_name -> amqp.PortalPositionAnswer
	53,  // 43: amqp.Almanax.tribute:type_name -> amqp.Almanax.Tribute
	80,  // 44: amqp.Almanax.date:type_name -> google.protobuf.Timestamp
	55,  // 45: amqp.AlignGetBookAnswer.believers:type_name -> amqp.AlignGetBookAnswer.Believer
	56,  // 46: amqp.AlignGetUserAnswer.beliefs:type_name -> amqp.AlignGetUserAnswer.AlignExperience
	13,  // 47: amqp.CompetitionMapAnswer.source:type_name -> amqp.Source
	57,  // 48: amqp.ConfigurationGetAnswer.serverChannels:type_name -> amqp.ConfigurationGetAnswer.ServerChannel
	58,  // 49: amqp.ConfigurationGetAnswer.notifiedChannels:type_name -> amqp.ConfigurationGetAnswer.NotifiedChannel
	80,  // 50: amqp.EncyclopediaAlmanaxRequest.date:type_name -> google.protobuf.Timestamp
	12,  // 51: amqp.EncyclopediaAlmanaxAnswer.almanax:type_name -> amqp.Almanax
	13,  // 52: amqp.EncyclopediaAlmanaxAnswer.source:type_name -> amqp.Source
	80,  // 53: amqp.EncyclopediaAlmanaxEffectRequest.date:type_name -> google.protobuf.Timestamp
	7,   // 54: amqp.EncyclopediaAlmanaxEffectRequest.type:type_name -> amqp.EncyclopediaAlmanaxEffectRequest.RequestType
	12,  // 55: amqp.EncyclopediaAlmanaxEffectAnswer.almanaxes:type_name -> amqp.Almanax
	13,  // 56: amqp.EncyclopediaAlmanaxEffectAnswer.source:type_name -> amqp.Source
	59,  // 57: amqp.EncyclopediaAlmanaxResourceAnswer.tributes:type_name -> amqp.EncyclopediaAlmanaxResourceAnswer.Tribute
	13,  // 58: amqp.EncyclopediaAlmanaxResourceAnswer.source:type_name -> amqp.Source
	8,   // 59: amqp.EncyclopediaListRequest.type:type_name -> amqp.EncyclopediaListRequest.Type
	60,  // 60: amqp.EncyclopediaListAnswer.items:type_name -> amqp.EncyclopediaListAnswer.Item
	3,   // 61: amqp.EncyclopediaItemRequest.type:type_name -> amqp.ItemType
	3,   // 62: amqp.EncyclopediaItemAnswer.type:type_name -> amqp.ItemType
	61,  // 63: amqp.EncyclopediaItemAnswer.equipment:type_name -> amqp.EncyclopediaItemAnswer.Equipment
	62,  // 64: amqp.EncyclopediaItemAnswer.set:type_name -> amqp.EncyclopediaItemAnswer.Set
	13,  // 65: amqp.EncyclopediaItemAnswer.source:type_name -> amqp.Source
	74,  // 66: amqp.JobGetBookAnswer.craftsmen:type_name -> amqp.JobGetBookAnswer.Craftsman
	75,  // 67: amqp.JobGetUserAnswer.jobs:type_name -> amqp.JobGetUserAnswer.JobExperience
	76,  // 68: amqp.NewsAlmanaxMessage.almanaxes:type_name -> amqp.NewsAlmanaxMessage.I18nAlmanax
	13,  // 69: amqp.NewsAlmanaxMessage.source:type_name -> amqp.Source
	80,  // 70: amqp.NewsTwitterMessage.date:type_name -> google.protobuf.Timestamp
	80,  // 71: amqp.NewsRSSMessage.date:type_name -> google.protobuf.Timestamp
	10,  // 72: amqp.NewsGuildMessage.event:type_name -> amqp.NewsGuildMessage.Event
	77,  // 73: amqp.PortalPositionAnswer.positions:type_name -> amqp.PortalPositionAnswer.PortalPosition
	54,  // 74: amqp.Almanax.Tribute.item:type_name -> amqp.Almanax.Tribute.Item
	3,   // 75: amqp.Almanax.Tribute.Item.type:type_name -> amqp.ItemType
	6,   // 76: amqp.ConfigurationGetAnswer.NotifiedChannel.notificationType:type_name -> amqp.ConfigurationGetAnswer.NotifiedChannel.NotificationType
	3,   // 77: amqp.EncyclopediaAlmanaxResourceAnswer.Tribute.itemType:type_name -> amqp.ItemType
	67,  // 78: amqp.EncyclopediaItemAnswer.Equipment.type:type_name -> amqp.EncyclopediaItemAnswer.Equipment.Type
	68,  // 79: amqp.EncyclopediaItemAnswer.Equipment.set:type_name -> amqp.EncyclopediaItemAnswer.Equipment.SetFamily
	66,  // 80: amqp.EncyclopediaItemAnswer.Equipment.characteristics:type_name -> amqp.EncyclopediaItemAnswer.Equipment.Characteristics
	63,  // 81: amqp.EncyclopediaItemAnswer.Equipment.weaponEffects:type_name -> amqp.EncyclopediaItemAnswer.Effect
	63,  // 82: amqp.EncyclopediaItemAnswer.Equipment.effects:type_name -> amqp.EncyclopediaItemAnswer.Effect
	64,  // 83: amqp.EncyclopediaItemAnswer.Equipment.conditions:type_name -> amqp.EncyclopediaItemAnswer.Conditions
	65,  // 84: amqp.EncyclopediaItemAnswer.Equipment.recipe:type_name -> amqp.EncyclopediaItemAnswer.Recipe
	69,  // 85: amqp.EncyclopediaItemAnswer.Set.equipments:type_name -> amqp.EncyclopediaItemAnswer.Set.Equipment
	70,  // 86: amqp.EncyclopediaItemAnswer.Set.bonuses:type_name -> amqp.EncyclopediaItemAnswer.Set.Bonus
	9,   // 87: amqp.EncyclopediaItemAnswer.Conditions.relation:type_name -> amqp.EncyclopediaItemAnswer.Conditions.Relation
	64,  // 88: amqp.EncyclopediaItemAnswer.Conditions.children:type_name -> amqp.EncyclopediaItemAnswer.Conditions
	71,  // 89: amqp.EncyclopediaItemAnswer.Conditions.condition:type_name -> amqp.EncyclopediaItemAnswer.Conditions.Condition
	73,  // 90: amqp.EncyclopediaItemAnswer.Recipe.ingredients:type_name -> amqp.EncyclopediaItemAnswer.Recipe.Ingredient
	3,   // 91: amqp.EncyclopediaItemAnswer.Equipment.Type.itemType:type_name -> amqp.ItemType
	2,   // 92: amqp.EncyclopediaItemAnswer.Equipment.Type.equipmentType:type_name -> amqp.EquipmentType
	2,   // 93: amqp.EncyclopediaItemAnswer.Set.Equipment.type:type_name -> amqp.EquipmentType
	63,  // 94: amqp.EncyclopediaItemAnswer.Set.Bonus.effects:type_name -> amqp.EncyclopediaItemAnswer.Effect
	72,  // 95: amqp.EncyclopediaItemAnswer.Conditions.Condition.element:type_name -> amqp.EncyclopediaItemAnswer.Conditions.Condition.Element
	3,   // 96: amqp.EncyclopediaItemAnswer.Recipe.Ingredient.type:type_name -> amqp.ItemType
	12,  // 97: amqp.NewsAlmanaxMessage.I18nAlmanax.almanax:type_name -> amqp.Almanax
	1,   // 98: amqp.NewsAlmanaxMessage.I18nAlmanax.locale:type_name -> amqp.Language
	78,  // 99: amqp.PortalPositionAnswer.PortalPosition.position:type_name -> amqp.PortalPositionAnswer.PortalPosition.Position
	80,  // 100: amqp.PortalPositionAnswer.PortalPosition.createdAt:type_name -> google.protobuf.Timestamp
	80,  // 101: amqp.PortalPositionAnswer.PortalPosition.updatedAt:type_name -> google.protobuf.Timestamp
	13,  // 102: amqp.PortalPositionAnswer.PortalPosition.source:type_name -> amqp.Source
	79,  // 103: amqp.PortalPositionAnswer.PortalPosition.Position.transport:type_name -> amqp.PortalPositionAnswer.PortalPosition.Position.Transport
	79,  // 104: amqp.PortalPositionAnswer.PortalPosition.Position.conditionalTransport:type_name -> amqp.PortalPositionAnswer.PortalPosition.Position.Transport
	105, // [105:105] is the sub-list for method output_type
	105, // [105:105] is the sub-list for method input_type
	105, // [105:105] is the sub-list for extension type_name
	105, // [105:105] is the sub-list for extension extendee
	0,   // [0:105] is the sub-list for field type_name
}

func init() { file_rabbitmq_proto_init() }
func file_rabbitmq_proto_init() {
	if File_rabbitmq_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_rabbitmq_proto_rawDesc), len(file_rabbitmq_proto_rawDesc)),
			NumEnums:      11,
			NumMessages:   69,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rabbitmq_proto_goTypes,
		DependencyIndexes: file_rabbitmq_proto_depIdxs,
		EnumInfos:         file_rabbitmq_proto_enumTypes,
		MessageInfos:      file_rabbitmq_proto_msgTypes,
	}.Build()
	File_rabbitmq_proto = out.File
	file_rabbitmq_proto_goTypes = nil
	file_rabbitmq_proto_depIdxs = nil
}
